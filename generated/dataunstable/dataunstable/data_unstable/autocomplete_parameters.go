// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewAutocompleteParams creates a new AutocompleteParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewAutocompleteParams() *AutocompleteParams {
	return &AutocompleteParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewAutocompleteParamsWithTimeout creates a new AutocompleteParams object
// with the ability to set a timeout on a request.
func NewAutocompleteParamsWithTimeout(timeout time.Duration) *AutocompleteParams {
	return &AutocompleteParams{
		timeout: timeout,
	}
}

// NewAutocompleteParamsWithContext creates a new AutocompleteParams object
// with the ability to set a context for a request.
func NewAutocompleteParamsWithContext(ctx context.Context) *AutocompleteParams {
	return &AutocompleteParams{
		Context: ctx,
	}
}

// NewAutocompleteParamsWithHTTPClient creates a new AutocompleteParams object
// with the ability to set a custom HTTPClient for a request.
func NewAutocompleteParamsWithHTTPClient(client *http.Client) *AutocompleteParams {
	return &AutocompleteParams{
		HTTPClient: client,
	}
}

/*
AutocompleteParams contains all the parameters to send to the API endpoint

	for the autocomplete operation.

	Typically these are written to a http.Request.
*/
type AutocompleteParams struct {

	// Index.
	//
	// Format: int64
	Index *int64

	// Limit.
	//
	// Format: int64
	Limit *int64

	/* LogFilterHappenedAfter.

	   Only log messages with a timestamp after this time will be returned.

	   Format: date-time
	*/
	LogFilterHappenedAfter *strfmt.DateTime

	/* LogFilterHappenedBefore.

	   Only log messages with a timestamp before this time will be returned.

	   Format: date-time
	*/
	LogFilterHappenedBefore *strfmt.DateTime

	/* LogFilterQuery.

	   Specifies the query to run to filter logs. Query defined using logql.
	*/
	LogFilterQuery *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the autocomplete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AutocompleteParams) WithDefaults() *AutocompleteParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the autocomplete params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *AutocompleteParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the autocomplete params
func (o *AutocompleteParams) WithTimeout(timeout time.Duration) *AutocompleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the autocomplete params
func (o *AutocompleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the autocomplete params
func (o *AutocompleteParams) WithContext(ctx context.Context) *AutocompleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the autocomplete params
func (o *AutocompleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the autocomplete params
func (o *AutocompleteParams) WithHTTPClient(client *http.Client) *AutocompleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the autocomplete params
func (o *AutocompleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIndex adds the index to the autocomplete params
func (o *AutocompleteParams) WithIndex(index *int64) *AutocompleteParams {
	o.SetIndex(index)
	return o
}

// SetIndex adds the index to the autocomplete params
func (o *AutocompleteParams) SetIndex(index *int64) {
	o.Index = index
}

// WithLimit adds the limit to the autocomplete params
func (o *AutocompleteParams) WithLimit(limit *int64) *AutocompleteParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the autocomplete params
func (o *AutocompleteParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLogFilterHappenedAfter adds the logFilterHappenedAfter to the autocomplete params
func (o *AutocompleteParams) WithLogFilterHappenedAfter(logFilterHappenedAfter *strfmt.DateTime) *AutocompleteParams {
	o.SetLogFilterHappenedAfter(logFilterHappenedAfter)
	return o
}

// SetLogFilterHappenedAfter adds the logFilterHappenedAfter to the autocomplete params
func (o *AutocompleteParams) SetLogFilterHappenedAfter(logFilterHappenedAfter *strfmt.DateTime) {
	o.LogFilterHappenedAfter = logFilterHappenedAfter
}

// WithLogFilterHappenedBefore adds the logFilterHappenedBefore to the autocomplete params
func (o *AutocompleteParams) WithLogFilterHappenedBefore(logFilterHappenedBefore *strfmt.DateTime) *AutocompleteParams {
	o.SetLogFilterHappenedBefore(logFilterHappenedBefore)
	return o
}

// SetLogFilterHappenedBefore adds the logFilterHappenedBefore to the autocomplete params
func (o *AutocompleteParams) SetLogFilterHappenedBefore(logFilterHappenedBefore *strfmt.DateTime) {
	o.LogFilterHappenedBefore = logFilterHappenedBefore
}

// WithLogFilterQuery adds the logFilterQuery to the autocomplete params
func (o *AutocompleteParams) WithLogFilterQuery(logFilterQuery *string) *AutocompleteParams {
	o.SetLogFilterQuery(logFilterQuery)
	return o
}

// SetLogFilterQuery adds the logFilterQuery to the autocomplete params
func (o *AutocompleteParams) SetLogFilterQuery(logFilterQuery *string) {
	o.LogFilterQuery = logFilterQuery
}

// WriteToRequest writes these params to a swagger request
func (o *AutocompleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Index != nil {

		// query param index
		var qrIndex int64

		if o.Index != nil {
			qrIndex = *o.Index
		}
		qIndex := swag.FormatInt64(qrIndex)
		if qIndex != "" {

			if err := r.SetQueryParam("index", qIndex); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.LogFilterHappenedAfter != nil {

		// query param log_filter.happened_after
		var qrLogFilterHappenedAfter strfmt.DateTime

		if o.LogFilterHappenedAfter != nil {
			qrLogFilterHappenedAfter = *o.LogFilterHappenedAfter
		}
		qLogFilterHappenedAfter := qrLogFilterHappenedAfter.String()
		if qLogFilterHappenedAfter != "" {

			if err := r.SetQueryParam("log_filter.happened_after", qLogFilterHappenedAfter); err != nil {
				return err
			}
		}
	}

	if o.LogFilterHappenedBefore != nil {

		// query param log_filter.happened_before
		var qrLogFilterHappenedBefore strfmt.DateTime

		if o.LogFilterHappenedBefore != nil {
			qrLogFilterHappenedBefore = *o.LogFilterHappenedBefore
		}
		qLogFilterHappenedBefore := qrLogFilterHappenedBefore.String()
		if qLogFilterHappenedBefore != "" {

			if err := r.SetQueryParam("log_filter.happened_before", qLogFilterHappenedBefore); err != nil {
				return err
			}
		}
	}

	if o.LogFilterQuery != nil {

		// query param log_filter.query
		var qrLogFilterQuery string

		if o.LogFilterQuery != nil {
			qrLogFilterQuery = *o.LogFilterQuery
		}
		qLogFilterQuery := qrLogFilterQuery
		if qLogFilterQuery != "" {

			if err := r.SetQueryParam("log_filter.query", qLogFilterQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
