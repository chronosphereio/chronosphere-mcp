// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new data unstable API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new data unstable API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new data unstable API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for data unstable API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Autocomplete(params *AutocompleteParams, opts ...ClientOption) (*AutocompleteOK, error)

	CancelLogQuery(params *CancelLogQueryParams, opts ...ClientOption) (*CancelLogQueryOK, error)

	CreateEvent(params *CreateEventParams, opts ...ClientOption) (*CreateEventOK, error)

	GetEvent(params *GetEventParams, opts ...ClientOption) (*GetEventOK, error)

	GetEventHistogram(params *GetEventHistogramParams, opts ...ClientOption) (*GetEventHistogramOK, error)

	GetEventsForMonitor(params *GetEventsForMonitorParams, opts ...ClientOption) (*GetEventsForMonitorOK, error)

	GetInstantQuery(params *GetInstantQueryParams, opts ...ClientOption) (*GetInstantQueryOK, error)

	GetLogClusterExecutions(params *GetLogClusterExecutionsParams, opts ...ClientOption) (*GetLogClusterExecutionsOK, error)

	GetLogClusterUsage(params *GetLogClusterUsageParams, opts ...ClientOption) (*GetLogClusterUsageOK, error)

	GetLogHistogram(params *GetLogHistogramParams, opts ...ClientOption) (*GetLogHistogramOK, error)

	GetLoggingUsage(params *GetLoggingUsageParams, opts ...ClientOption) (*GetLoggingUsageOK, error)

	GetRangeQuery(params *GetRangeQueryParams, opts ...ClientOption) (*GetRangeQueryOK, error)

	GetTenantConfiguration(params *GetTenantConfigurationParams, opts ...ClientOption) (*GetTenantConfigurationOK, error)

	ListEventFieldValues(params *ListEventFieldValuesParams, opts ...ClientOption) (*ListEventFieldValuesOK, error)

	ListEventGrafanaAnnotations(params *ListEventGrafanaAnnotationsParams, opts ...ClientOption) (*ListEventGrafanaAnnotationsOK, error)

	ListEvents(params *ListEventsParams, opts ...ClientOption) (*ListEventsOK, error)

	ListLogFieldNames(params *ListLogFieldNamesParams, opts ...ClientOption) (*ListLogFieldNamesOK, error)

	ListLogFieldValues(params *ListLogFieldValuesParams, opts ...ClientOption) (*ListLogFieldValuesOK, error)

	ListLogs(params *ListLogsParams, opts ...ClientOption) (*ListLogsOK, error)

	ListTraces(params *ListTracesParams, opts ...ClientOption) (*ListTracesOK, error)

	PassThroughQuery(params *PassThroughQueryParams, opts ...ClientOption) (*PassThroughQueryOK, error)

	PollListLogFieldNames(params *PollListLogFieldNamesParams, opts ...ClientOption) (*PollListLogFieldNamesOK, error)

	PollListLogFieldValues(params *PollListLogFieldValuesParams, opts ...ClientOption) (*PollListLogFieldValuesOK, error)

	PollListLogsQuery(params *PollListLogsQueryParams, opts ...ClientOption) (*PollListLogsQueryOK, error)

	PollLogHistogramQuery(params *PollLogHistogramQueryParams, opts ...ClientOption) (*PollLogHistogramQueryOK, error)

	PollRangeQuery(params *PollRangeQueryParams, opts ...ClientOption) (*PollRangeQueryOK, error)

	StartListLogFieldNames(params *StartListLogFieldNamesParams, opts ...ClientOption) (*StartListLogFieldNamesOK, error)

	StartListLogFieldValues(params *StartListLogFieldValuesParams, opts ...ClientOption) (*StartListLogFieldValuesOK, error)

	StartListLogsQuery(params *StartListLogsQueryParams, opts ...ClientOption) (*StartListLogsQueryOK, error)

	StartLogHistogram(params *StartLogHistogramParams, opts ...ClientOption) (*StartLogHistogramOK, error)

	StartRangeQuery(params *StartRangeQueryParams, opts ...ClientOption) (*StartRangeQueryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
Autocomplete autocomplete API
*/
func (a *Client) Autocomplete(params *AutocompleteParams, opts ...ClientOption) (*AutocompleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAutocompleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Autocomplete",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:autocomplete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AutocompleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AutocompleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AutocompleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CancelLogQuery cancel log query API
*/
func (a *Client) CancelLogQuery(params *CancelLogQueryParams, opts ...ClientOption) (*CancelLogQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelLogQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CancelLogQuery",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:cancel-query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelLogQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelLogQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CancelLogQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateEvent create event API
*/
func (a *Client) CreateEvent(params *CreateEventParams, opts ...ClientOption) (*CreateEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateEvent",
		Method:             "POST",
		PathPattern:        "/api/unstable/data/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEvent get event API
*/
func (a *Client) GetEvent(params *GetEventParams, opts ...ClientOption) (*GetEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEvent",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/events/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEventHistogram get event histogram API
*/
func (a *Client) GetEventHistogram(params *GetEventHistogramParams, opts ...ClientOption) (*GetEventHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventHistogramParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEventHistogram",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/events:histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventHistogramOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEventHistogramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetEventsForMonitor get events for monitor API
*/
func (a *Client) GetEventsForMonitor(params *GetEventsForMonitorParams, opts ...ClientOption) (*GetEventsForMonitorOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsForMonitorParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetEventsForMonitor",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/events:histogram-with-details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventsForMonitorReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventsForMonitorOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetEventsForMonitorDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInstantQuery GetInstantQuery returns an instant query aggregated query.
*/
func (a *Client) GetInstantQuery(params *GetInstantQueryParams, opts ...ClientOption) (*GetInstantQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstantQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetInstantQuery",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:get-instant-query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstantQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstantQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInstantQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLogClusterExecutions get log cluster executions API
*/
func (a *Client) GetLogClusterExecutions(params *GetLogClusterExecutionsParams, opts ...ClientOption) (*GetLogClusterExecutionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogClusterExecutionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLogClusterExecutions",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:get-log-cluster-executions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogClusterExecutionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogClusterExecutionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLogClusterExecutionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLogClusterUsage get log cluster usage API
*/
func (a *Client) GetLogClusterUsage(params *GetLogClusterUsageParams, opts ...ClientOption) (*GetLogClusterUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogClusterUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLogClusterUsage",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:get-log-cluster-usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogClusterUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogClusterUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLogClusterUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLogHistogram get log histogram API
*/
func (a *Client) GetLogHistogram(params *GetLogHistogramParams, opts ...ClientOption) (*GetLogHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLogHistogramParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLogHistogram",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLogHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLogHistogramOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLogHistogramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetLoggingUsage Logging Usage
*/
func (a *Client) GetLoggingUsage(params *GetLoggingUsageParams, opts ...ClientOption) (*GetLoggingUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLoggingUsageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetLoggingUsage",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:get-logging-usage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetLoggingUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLoggingUsageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLoggingUsageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRangeQuery GetInstantQuery returns an instant query aggregated query.
*/
func (a *Client) GetRangeQuery(params *GetRangeQueryParams, opts ...ClientOption) (*GetRangeQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRangeQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetRangeQuery",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:get-range-query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRangeQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRangeQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRangeQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTenantConfiguration get tenant configuration API
*/
func (a *Client) GetTenantConfiguration(params *GetTenantConfigurationParams, opts ...ClientOption) (*GetTenantConfigurationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTenantConfigurationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTenantConfiguration",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:get-tenant-configuration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTenantConfigurationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTenantConfigurationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTenantConfigurationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListEventFieldValues list event field values API
*/
func (a *Client) ListEventFieldValues(params *ListEventFieldValuesParams, opts ...ClientOption) (*ListEventFieldValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventFieldValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListEventFieldValues",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/events:field-values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventFieldValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventFieldValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEventFieldValuesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListEventGrafanaAnnotations list event grafana annotations API
*/
func (a *Client) ListEventGrafanaAnnotations(params *ListEventGrafanaAnnotationsParams, opts ...ClientOption) (*ListEventGrafanaAnnotationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventGrafanaAnnotationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListEventGrafanaAnnotations",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/events:grafana-annotations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventGrafanaAnnotationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventGrafanaAnnotationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEventGrafanaAnnotationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListEvents list events API
*/
func (a *Client) ListEvents(params *ListEventsParams, opts ...ClientOption) (*ListEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListEvents",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListEventsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListLogFieldNames list log field names API
*/
func (a *Client) ListLogFieldNames(params *ListLogFieldNamesParams, opts ...ClientOption) (*ListLogFieldNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLogFieldNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListLogFieldNames",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:list-log-field-names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLogFieldNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLogFieldNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListLogFieldNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListLogFieldValues list log field values API
*/
func (a *Client) ListLogFieldValues(params *ListLogFieldValuesParams, opts ...ClientOption) (*ListLogFieldValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLogFieldValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListLogFieldValues",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:list-log-field-values",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLogFieldValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLogFieldValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListLogFieldValuesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListLogs Logging.
*/
func (a *Client) ListLogs(params *ListLogsParams, opts ...ClientOption) (*ListLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListLogs",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListLogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListTraces Tracing
*/
func (a *Client) ListTraces(params *ListTracesParams, opts ...ClientOption) (*ListTracesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTracesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListTraces",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/traces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTracesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTracesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListTracesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PassThroughQuery pass through query API
*/
func (a *Client) PassThroughQuery(params *PassThroughQueryParams, opts ...ClientOption) (*PassThroughQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPassThroughQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PassThroughQuery",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:pass-through-query",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PassThroughQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PassThroughQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PassThroughQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PollListLogFieldNames poll list log field names API
*/
func (a *Client) PollListLogFieldNames(params *PollListLogFieldNamesParams, opts ...ClientOption) (*PollListLogFieldNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollListLogFieldNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PollListLogFieldNames",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:list-log-field-names-poll",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PollListLogFieldNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PollListLogFieldNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PollListLogFieldNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PollListLogFieldValues poll list log field values API
*/
func (a *Client) PollListLogFieldValues(params *PollListLogFieldValuesParams, opts ...ClientOption) (*PollListLogFieldValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollListLogFieldValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PollListLogFieldValues",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:list-log-field-values-poll",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PollListLogFieldValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PollListLogFieldValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PollListLogFieldValuesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PollListLogsQuery poll list logs query API
*/
func (a *Client) PollListLogsQuery(params *PollListLogsQueryParams, opts ...ClientOption) (*PollListLogsQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollListLogsQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PollListLogsQuery",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:list-poll",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PollListLogsQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PollListLogsQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PollListLogsQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PollLogHistogramQuery poll log histogram query API
*/
func (a *Client) PollLogHistogramQuery(params *PollLogHistogramQueryParams, opts ...ClientOption) (*PollLogHistogramQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollLogHistogramQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PollLogHistogramQuery",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:histogram-poll",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PollLogHistogramQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PollLogHistogramQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PollLogHistogramQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PollRangeQuery poll range query API
*/
func (a *Client) PollRangeQuery(params *PollRangeQueryParams, opts ...ClientOption) (*PollRangeQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPollRangeQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PollRangeQuery",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:get-range-query-poll",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PollRangeQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PollRangeQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PollRangeQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartListLogFieldNames start list log field names API
*/
func (a *Client) StartListLogFieldNames(params *StartListLogFieldNamesParams, opts ...ClientOption) (*StartListLogFieldNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartListLogFieldNamesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartListLogFieldNames",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:list-log-field-names-start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartListLogFieldNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartListLogFieldNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartListLogFieldNamesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartListLogFieldValues start list log field values API
*/
func (a *Client) StartListLogFieldValues(params *StartListLogFieldValuesParams, opts ...ClientOption) (*StartListLogFieldValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartListLogFieldValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartListLogFieldValues",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:list-log-field-values-start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartListLogFieldValuesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartListLogFieldValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartListLogFieldValuesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartListLogsQuery start list logs query API
*/
func (a *Client) StartListLogsQuery(params *StartListLogsQueryParams, opts ...ClientOption) (*StartListLogsQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartListLogsQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartListLogsQuery",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:list-start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartListLogsQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartListLogsQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartListLogsQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartLogHistogram start log histogram API
*/
func (a *Client) StartLogHistogram(params *StartLogHistogramParams, opts ...ClientOption) (*StartLogHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartLogHistogramParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartLogHistogram",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:histogram-start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartLogHistogramReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartLogHistogramOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartLogHistogramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
StartRangeQuery start range query API
*/
func (a *Client) StartRangeQuery(params *StartRangeQueryParams, opts ...ClientOption) (*StartRangeQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartRangeQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "StartRangeQuery",
		Method:             "GET",
		PathPattern:        "/api/unstable/data/logs:get-range-query-start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartRangeQueryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartRangeQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*StartRangeQueryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
