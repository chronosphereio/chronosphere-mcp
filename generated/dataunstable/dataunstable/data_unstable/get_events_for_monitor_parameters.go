// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetEventsForMonitorParams creates a new GetEventsForMonitorParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEventsForMonitorParams() *GetEventsForMonitorParams {
	return &GetEventsForMonitorParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEventsForMonitorParamsWithTimeout creates a new GetEventsForMonitorParams object
// with the ability to set a timeout on a request.
func NewGetEventsForMonitorParamsWithTimeout(timeout time.Duration) *GetEventsForMonitorParams {
	return &GetEventsForMonitorParams{
		timeout: timeout,
	}
}

// NewGetEventsForMonitorParamsWithContext creates a new GetEventsForMonitorParams object
// with the ability to set a context for a request.
func NewGetEventsForMonitorParamsWithContext(ctx context.Context) *GetEventsForMonitorParams {
	return &GetEventsForMonitorParams{
		Context: ctx,
	}
}

// NewGetEventsForMonitorParamsWithHTTPClient creates a new GetEventsForMonitorParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEventsForMonitorParamsWithHTTPClient(client *http.Client) *GetEventsForMonitorParams {
	return &GetEventsForMonitorParams{
		HTTPClient: client,
	}
}

/*
GetEventsForMonitorParams contains all the parameters to send to the API endpoint

	for the get events for monitor operation.

	Typically these are written to a http.Request.
*/
type GetEventsForMonitorParams struct {

	/* HappenedAfter.

	     Only events which happened_at after this time will be included. If set, happened_before must also be set.
	If no time range is set, defaults to 1 hour ago.

	     Format: date-time
	*/
	HappenedAfter *strfmt.DateTime

	/* HappenedBefore.

	     Only events which happened_at will be included. If set, happened_after must also be set.
	If no time range is set, defaults to now.

	     Format: date-time
	*/
	HappenedBefore *strfmt.DateTime

	/* Query.

	   A query string specifying the query.
	*/
	Query *string

	/* StepSize.

	   Duration each bucket in histogram should have. Must be greater than 10 seconds.
	*/
	StepSize *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get events for monitor params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEventsForMonitorParams) WithDefaults() *GetEventsForMonitorParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get events for monitor params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEventsForMonitorParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get events for monitor params
func (o *GetEventsForMonitorParams) WithTimeout(timeout time.Duration) *GetEventsForMonitorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get events for monitor params
func (o *GetEventsForMonitorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get events for monitor params
func (o *GetEventsForMonitorParams) WithContext(ctx context.Context) *GetEventsForMonitorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get events for monitor params
func (o *GetEventsForMonitorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get events for monitor params
func (o *GetEventsForMonitorParams) WithHTTPClient(client *http.Client) *GetEventsForMonitorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get events for monitor params
func (o *GetEventsForMonitorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHappenedAfter adds the happenedAfter to the get events for monitor params
func (o *GetEventsForMonitorParams) WithHappenedAfter(happenedAfter *strfmt.DateTime) *GetEventsForMonitorParams {
	o.SetHappenedAfter(happenedAfter)
	return o
}

// SetHappenedAfter adds the happenedAfter to the get events for monitor params
func (o *GetEventsForMonitorParams) SetHappenedAfter(happenedAfter *strfmt.DateTime) {
	o.HappenedAfter = happenedAfter
}

// WithHappenedBefore adds the happenedBefore to the get events for monitor params
func (o *GetEventsForMonitorParams) WithHappenedBefore(happenedBefore *strfmt.DateTime) *GetEventsForMonitorParams {
	o.SetHappenedBefore(happenedBefore)
	return o
}

// SetHappenedBefore adds the happenedBefore to the get events for monitor params
func (o *GetEventsForMonitorParams) SetHappenedBefore(happenedBefore *strfmt.DateTime) {
	o.HappenedBefore = happenedBefore
}

// WithQuery adds the query to the get events for monitor params
func (o *GetEventsForMonitorParams) WithQuery(query *string) *GetEventsForMonitorParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get events for monitor params
func (o *GetEventsForMonitorParams) SetQuery(query *string) {
	o.Query = query
}

// WithStepSize adds the stepSize to the get events for monitor params
func (o *GetEventsForMonitorParams) WithStepSize(stepSize *string) *GetEventsForMonitorParams {
	o.SetStepSize(stepSize)
	return o
}

// SetStepSize adds the stepSize to the get events for monitor params
func (o *GetEventsForMonitorParams) SetStepSize(stepSize *string) {
	o.StepSize = stepSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetEventsForMonitorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HappenedAfter != nil {

		// query param happened_after
		var qrHappenedAfter strfmt.DateTime

		if o.HappenedAfter != nil {
			qrHappenedAfter = *o.HappenedAfter
		}
		qHappenedAfter := qrHappenedAfter.String()
		if qHappenedAfter != "" {

			if err := r.SetQueryParam("happened_after", qHappenedAfter); err != nil {
				return err
			}
		}
	}

	if o.HappenedBefore != nil {

		// query param happened_before
		var qrHappenedBefore strfmt.DateTime

		if o.HappenedBefore != nil {
			qrHappenedBefore = *o.HappenedBefore
		}
		qHappenedBefore := qrHappenedBefore.String()
		if qHappenedBefore != "" {

			if err := r.SetQueryParam("happened_before", qHappenedBefore); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.StepSize != nil {

		// query param step_size
		var qrStepSize string

		if o.StepSize != nil {
			qrStepSize = *o.StepSize
		}
		qStepSize := qrStepSize
		if qStepSize != "" {

			if err := r.SetQueryParam("step_size", qStepSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
