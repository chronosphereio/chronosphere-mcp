// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetInstantQueryParams creates a new GetInstantQueryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetInstantQueryParams() *GetInstantQueryParams {
	return &GetInstantQueryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstantQueryParamsWithTimeout creates a new GetInstantQueryParams object
// with the ability to set a timeout on a request.
func NewGetInstantQueryParamsWithTimeout(timeout time.Duration) *GetInstantQueryParams {
	return &GetInstantQueryParams{
		timeout: timeout,
	}
}

// NewGetInstantQueryParamsWithContext creates a new GetInstantQueryParams object
// with the ability to set a context for a request.
func NewGetInstantQueryParamsWithContext(ctx context.Context) *GetInstantQueryParams {
	return &GetInstantQueryParams{
		Context: ctx,
	}
}

// NewGetInstantQueryParamsWithHTTPClient creates a new GetInstantQueryParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetInstantQueryParamsWithHTTPClient(client *http.Client) *GetInstantQueryParams {
	return &GetInstantQueryParams{
		HTTPClient: client,
	}
}

/*
GetInstantQueryParams contains all the parameters to send to the API endpoint

	for the get instant query operation.

	Typically these are written to a http.Request.
*/
type GetInstantQueryParams struct {

	/* Query.

	   Specifies the query to run to filter logs. Query defined using logql.
	*/
	Query *string

	/* TimestampNanos.

	   The timestamp with which to evaluate the query.

	   Format: date-time
	*/
	TimestampNanos *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get instant query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInstantQueryParams) WithDefaults() *GetInstantQueryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get instant query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInstantQueryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get instant query params
func (o *GetInstantQueryParams) WithTimeout(timeout time.Duration) *GetInstantQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get instant query params
func (o *GetInstantQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get instant query params
func (o *GetInstantQueryParams) WithContext(ctx context.Context) *GetInstantQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get instant query params
func (o *GetInstantQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get instant query params
func (o *GetInstantQueryParams) WithHTTPClient(client *http.Client) *GetInstantQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get instant query params
func (o *GetInstantQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQuery adds the query to the get instant query params
func (o *GetInstantQueryParams) WithQuery(query *string) *GetInstantQueryParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get instant query params
func (o *GetInstantQueryParams) SetQuery(query *string) {
	o.Query = query
}

// WithTimestampNanos adds the timestampNanos to the get instant query params
func (o *GetInstantQueryParams) WithTimestampNanos(timestampNanos *strfmt.DateTime) *GetInstantQueryParams {
	o.SetTimestampNanos(timestampNanos)
	return o
}

// SetTimestampNanos adds the timestampNanos to the get instant query params
func (o *GetInstantQueryParams) SetTimestampNanos(timestampNanos *strfmt.DateTime) {
	o.TimestampNanos = timestampNanos
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstantQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.TimestampNanos != nil {

		// query param timestamp_nanos
		var qrTimestampNanos strfmt.DateTime

		if o.TimestampNanos != nil {
			qrTimestampNanos = *o.TimestampNanos
		}
		qTimestampNanos := qrTimestampNanos.String()
		if qTimestampNanos != "" {

			if err := r.SetQueryParam("timestamp_nanos", qTimestampNanos); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
