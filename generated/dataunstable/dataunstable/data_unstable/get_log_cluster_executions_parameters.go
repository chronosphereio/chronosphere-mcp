// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLogClusterExecutionsParams creates a new GetLogClusterExecutionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLogClusterExecutionsParams() *GetLogClusterExecutionsParams {
	return &GetLogClusterExecutionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLogClusterExecutionsParamsWithTimeout creates a new GetLogClusterExecutionsParams object
// with the ability to set a timeout on a request.
func NewGetLogClusterExecutionsParamsWithTimeout(timeout time.Duration) *GetLogClusterExecutionsParams {
	return &GetLogClusterExecutionsParams{
		timeout: timeout,
	}
}

// NewGetLogClusterExecutionsParamsWithContext creates a new GetLogClusterExecutionsParams object
// with the ability to set a context for a request.
func NewGetLogClusterExecutionsParamsWithContext(ctx context.Context) *GetLogClusterExecutionsParams {
	return &GetLogClusterExecutionsParams{
		Context: ctx,
	}
}

// NewGetLogClusterExecutionsParamsWithHTTPClient creates a new GetLogClusterExecutionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLogClusterExecutionsParamsWithHTTPClient(client *http.Client) *GetLogClusterExecutionsParams {
	return &GetLogClusterExecutionsParams{
		HTTPClient: client,
	}
}

/*
GetLogClusterExecutionsParams contains all the parameters to send to the API endpoint

	for the get log cluster executions operation.

	Typically these are written to a http.Request.
*/
type GetLogClusterExecutionsParams struct {

	// After.
	//
	// Format: date-time
	After *strfmt.DateTime

	// Before.
	//
	// Format: date-time
	Before *strfmt.DateTime

	// ExecutionType.
	ExecutionType *string

	// IDClusterID.
	//
	// Format: int64
	IDClusterID *string

	// IDKey.
	IDKey *string

	/* PageMaxSize.

	     Page size preference (i.e. how many items are returned in the next
	page). If zero, the server will use a default. Regardless of what size
	is given, clients must never assume how many items will be returned.

	     Format: int64
	*/
	PageMaxSize *int64

	/* PageToken.

	     Opaque page token identifying which page to request. An empty token
	identifies the first page.
	*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get log cluster executions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLogClusterExecutionsParams) WithDefaults() *GetLogClusterExecutionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get log cluster executions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLogClusterExecutionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithTimeout(timeout time.Duration) *GetLogClusterExecutionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithContext(ctx context.Context) *GetLogClusterExecutionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithHTTPClient(client *http.Client) *GetLogClusterExecutionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithAfter(after *strfmt.DateTime) *GetLogClusterExecutionsParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetAfter(after *strfmt.DateTime) {
	o.After = after
}

// WithBefore adds the before to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithBefore(before *strfmt.DateTime) *GetLogClusterExecutionsParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetBefore(before *strfmt.DateTime) {
	o.Before = before
}

// WithExecutionType adds the executionType to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithExecutionType(executionType *string) *GetLogClusterExecutionsParams {
	o.SetExecutionType(executionType)
	return o
}

// SetExecutionType adds the executionType to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetExecutionType(executionType *string) {
	o.ExecutionType = executionType
}

// WithIDClusterID adds the iDClusterID to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithIDClusterID(iDClusterID *string) *GetLogClusterExecutionsParams {
	o.SetIDClusterID(iDClusterID)
	return o
}

// SetIDClusterID adds the idClusterId to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetIDClusterID(iDClusterID *string) {
	o.IDClusterID = iDClusterID
}

// WithIDKey adds the iDKey to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithIDKey(iDKey *string) *GetLogClusterExecutionsParams {
	o.SetIDKey(iDKey)
	return o
}

// SetIDKey adds the idKey to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetIDKey(iDKey *string) {
	o.IDKey = iDKey
}

// WithPageMaxSize adds the pageMaxSize to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithPageMaxSize(pageMaxSize *int64) *GetLogClusterExecutionsParams {
	o.SetPageMaxSize(pageMaxSize)
	return o
}

// SetPageMaxSize adds the pageMaxSize to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetPageMaxSize(pageMaxSize *int64) {
	o.PageMaxSize = pageMaxSize
}

// WithPageToken adds the pageToken to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) WithPageToken(pageToken *string) *GetLogClusterExecutionsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the get log cluster executions params
func (o *GetLogClusterExecutionsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *GetLogClusterExecutionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter strfmt.DateTime

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter.String()
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore strfmt.DateTime

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore.String()
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	if o.ExecutionType != nil {

		// query param execution_type
		var qrExecutionType string

		if o.ExecutionType != nil {
			qrExecutionType = *o.ExecutionType
		}
		qExecutionType := qrExecutionType
		if qExecutionType != "" {

			if err := r.SetQueryParam("execution_type", qExecutionType); err != nil {
				return err
			}
		}
	}

	if o.IDClusterID != nil {

		// query param id.cluster_id
		var qrIDClusterID string

		if o.IDClusterID != nil {
			qrIDClusterID = *o.IDClusterID
		}
		qIDClusterID := qrIDClusterID
		if qIDClusterID != "" {

			if err := r.SetQueryParam("id.cluster_id", qIDClusterID); err != nil {
				return err
			}
		}
	}

	if o.IDKey != nil {

		// query param id.key
		var qrIDKey string

		if o.IDKey != nil {
			qrIDKey = *o.IDKey
		}
		qIDKey := qrIDKey
		if qIDKey != "" {

			if err := r.SetQueryParam("id.key", qIDKey); err != nil {
				return err
			}
		}
	}

	if o.PageMaxSize != nil {

		// query param page.max_size
		var qrPageMaxSize int64

		if o.PageMaxSize != nil {
			qrPageMaxSize = *o.PageMaxSize
		}
		qPageMaxSize := swag.FormatInt64(qrPageMaxSize)
		if qPageMaxSize != "" {

			if err := r.SetQueryParam("page.max_size", qPageMaxSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page.token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page.token", qPageToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
