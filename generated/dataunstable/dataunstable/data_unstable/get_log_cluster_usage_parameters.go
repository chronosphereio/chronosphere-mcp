// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetLogClusterUsageParams creates a new GetLogClusterUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLogClusterUsageParams() *GetLogClusterUsageParams {
	return &GetLogClusterUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLogClusterUsageParamsWithTimeout creates a new GetLogClusterUsageParams object
// with the ability to set a timeout on a request.
func NewGetLogClusterUsageParamsWithTimeout(timeout time.Duration) *GetLogClusterUsageParams {
	return &GetLogClusterUsageParams{
		timeout: timeout,
	}
}

// NewGetLogClusterUsageParamsWithContext creates a new GetLogClusterUsageParams object
// with the ability to set a context for a request.
func NewGetLogClusterUsageParamsWithContext(ctx context.Context) *GetLogClusterUsageParams {
	return &GetLogClusterUsageParams{
		Context: ctx,
	}
}

// NewGetLogClusterUsageParamsWithHTTPClient creates a new GetLogClusterUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLogClusterUsageParamsWithHTTPClient(client *http.Client) *GetLogClusterUsageParams {
	return &GetLogClusterUsageParams{
		HTTPClient: client,
	}
}

/*
GetLogClusterUsageParams contains all the parameters to send to the API endpoint

	for the get log cluster usage operation.

	Typically these are written to a http.Request.
*/
type GetLogClusterUsageParams struct {

	// After.
	//
	// Format: date-time
	After *strfmt.DateTime

	// Before.
	//
	// Format: date-time
	Before *strfmt.DateTime

	// IDClusterID.
	//
	// Format: int64
	IDClusterID *string

	// IDKey.
	IDKey *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get log cluster usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLogClusterUsageParams) WithDefaults() *GetLogClusterUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get log cluster usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLogClusterUsageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get log cluster usage params
func (o *GetLogClusterUsageParams) WithTimeout(timeout time.Duration) *GetLogClusterUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get log cluster usage params
func (o *GetLogClusterUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get log cluster usage params
func (o *GetLogClusterUsageParams) WithContext(ctx context.Context) *GetLogClusterUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get log cluster usage params
func (o *GetLogClusterUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get log cluster usage params
func (o *GetLogClusterUsageParams) WithHTTPClient(client *http.Client) *GetLogClusterUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get log cluster usage params
func (o *GetLogClusterUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get log cluster usage params
func (o *GetLogClusterUsageParams) WithAfter(after *strfmt.DateTime) *GetLogClusterUsageParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get log cluster usage params
func (o *GetLogClusterUsageParams) SetAfter(after *strfmt.DateTime) {
	o.After = after
}

// WithBefore adds the before to the get log cluster usage params
func (o *GetLogClusterUsageParams) WithBefore(before *strfmt.DateTime) *GetLogClusterUsageParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get log cluster usage params
func (o *GetLogClusterUsageParams) SetBefore(before *strfmt.DateTime) {
	o.Before = before
}

// WithIDClusterID adds the iDClusterID to the get log cluster usage params
func (o *GetLogClusterUsageParams) WithIDClusterID(iDClusterID *string) *GetLogClusterUsageParams {
	o.SetIDClusterID(iDClusterID)
	return o
}

// SetIDClusterID adds the idClusterId to the get log cluster usage params
func (o *GetLogClusterUsageParams) SetIDClusterID(iDClusterID *string) {
	o.IDClusterID = iDClusterID
}

// WithIDKey adds the iDKey to the get log cluster usage params
func (o *GetLogClusterUsageParams) WithIDKey(iDKey *string) *GetLogClusterUsageParams {
	o.SetIDKey(iDKey)
	return o
}

// SetIDKey adds the idKey to the get log cluster usage params
func (o *GetLogClusterUsageParams) SetIDKey(iDKey *string) {
	o.IDKey = iDKey
}

// WriteToRequest writes these params to a swagger request
func (o *GetLogClusterUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter strfmt.DateTime

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter.String()
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore strfmt.DateTime

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore.String()
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	if o.IDClusterID != nil {

		// query param id.cluster_id
		var qrIDClusterID string

		if o.IDClusterID != nil {
			qrIDClusterID = *o.IDClusterID
		}
		qIDClusterID := qrIDClusterID
		if qIDClusterID != "" {

			if err := r.SetQueryParam("id.cluster_id", qIDClusterID); err != nil {
				return err
			}
		}
	}

	if o.IDKey != nil {

		// query param id.key
		var qrIDKey string

		if o.IDKey != nil {
			qrIDKey = *o.IDKey
		}
		qIDKey := qrIDKey
		if qIDKey != "" {

			if err := r.SetQueryParam("id.key", qIDKey); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
