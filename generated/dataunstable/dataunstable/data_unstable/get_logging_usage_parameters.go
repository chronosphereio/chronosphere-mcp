// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetLoggingUsageParams creates a new GetLoggingUsageParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetLoggingUsageParams() *GetLoggingUsageParams {
	return &GetLoggingUsageParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetLoggingUsageParamsWithTimeout creates a new GetLoggingUsageParams object
// with the ability to set a timeout on a request.
func NewGetLoggingUsageParamsWithTimeout(timeout time.Duration) *GetLoggingUsageParams {
	return &GetLoggingUsageParams{
		timeout: timeout,
	}
}

// NewGetLoggingUsageParamsWithContext creates a new GetLoggingUsageParams object
// with the ability to set a context for a request.
func NewGetLoggingUsageParamsWithContext(ctx context.Context) *GetLoggingUsageParams {
	return &GetLoggingUsageParams{
		Context: ctx,
	}
}

// NewGetLoggingUsageParamsWithHTTPClient creates a new GetLoggingUsageParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetLoggingUsageParamsWithHTTPClient(client *http.Client) *GetLoggingUsageParams {
	return &GetLoggingUsageParams{
		HTTPClient: client,
	}
}

/*
GetLoggingUsageParams contains all the parameters to send to the API endpoint

	for the get logging usage operation.

	Typically these are written to a http.Request.
*/
type GetLoggingUsageParams struct {

	// After.
	//
	// Format: date-time
	After *strfmt.DateTime

	// Before.
	//
	// Format: date-time
	Before *strfmt.DateTime

	/* Keys.

	   Optional list of keys for which to return clusters for. If not set, all clusters are returned.
	*/
	Keys []string

	// Order.
	Order *string

	/* PageMaxSize.

	     Page size preference (i.e. how many items are returned in the next
	page). If zero, the server will use a default. Regardless of what size
	is given, clients must never assume how many items will be returned.

	     Format: int64
	*/
	PageMaxSize *int64

	/* PageToken.

	     Opaque page token identifying which page to request. An empty token
	identifies the first page.
	*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get logging usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLoggingUsageParams) WithDefaults() *GetLoggingUsageParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get logging usage params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetLoggingUsageParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get logging usage params
func (o *GetLoggingUsageParams) WithTimeout(timeout time.Duration) *GetLoggingUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get logging usage params
func (o *GetLoggingUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get logging usage params
func (o *GetLoggingUsageParams) WithContext(ctx context.Context) *GetLoggingUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get logging usage params
func (o *GetLoggingUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get logging usage params
func (o *GetLoggingUsageParams) WithHTTPClient(client *http.Client) *GetLoggingUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get logging usage params
func (o *GetLoggingUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the get logging usage params
func (o *GetLoggingUsageParams) WithAfter(after *strfmt.DateTime) *GetLoggingUsageParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the get logging usage params
func (o *GetLoggingUsageParams) SetAfter(after *strfmt.DateTime) {
	o.After = after
}

// WithBefore adds the before to the get logging usage params
func (o *GetLoggingUsageParams) WithBefore(before *strfmt.DateTime) *GetLoggingUsageParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the get logging usage params
func (o *GetLoggingUsageParams) SetBefore(before *strfmt.DateTime) {
	o.Before = before
}

// WithKeys adds the keys to the get logging usage params
func (o *GetLoggingUsageParams) WithKeys(keys []string) *GetLoggingUsageParams {
	o.SetKeys(keys)
	return o
}

// SetKeys adds the keys to the get logging usage params
func (o *GetLoggingUsageParams) SetKeys(keys []string) {
	o.Keys = keys
}

// WithOrder adds the order to the get logging usage params
func (o *GetLoggingUsageParams) WithOrder(order *string) *GetLoggingUsageParams {
	o.SetOrder(order)
	return o
}

// SetOrder adds the order to the get logging usage params
func (o *GetLoggingUsageParams) SetOrder(order *string) {
	o.Order = order
}

// WithPageMaxSize adds the pageMaxSize to the get logging usage params
func (o *GetLoggingUsageParams) WithPageMaxSize(pageMaxSize *int64) *GetLoggingUsageParams {
	o.SetPageMaxSize(pageMaxSize)
	return o
}

// SetPageMaxSize adds the pageMaxSize to the get logging usage params
func (o *GetLoggingUsageParams) SetPageMaxSize(pageMaxSize *int64) {
	o.PageMaxSize = pageMaxSize
}

// WithPageToken adds the pageToken to the get logging usage params
func (o *GetLoggingUsageParams) WithPageToken(pageToken *string) *GetLoggingUsageParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the get logging usage params
func (o *GetLoggingUsageParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *GetLoggingUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter strfmt.DateTime

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter.String()
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	if o.Before != nil {

		// query param before
		var qrBefore strfmt.DateTime

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore.String()
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	if o.Keys != nil {

		// binding items for keys
		joinedKeys := o.bindParamKeys(reg)

		// query array param keys
		if err := r.SetQueryParam("keys", joinedKeys...); err != nil {
			return err
		}
	}

	if o.Order != nil {

		// query param order
		var qrOrder string

		if o.Order != nil {
			qrOrder = *o.Order
		}
		qOrder := qrOrder
		if qOrder != "" {

			if err := r.SetQueryParam("order", qOrder); err != nil {
				return err
			}
		}
	}

	if o.PageMaxSize != nil {

		// query param page.max_size
		var qrPageMaxSize int64

		if o.PageMaxSize != nil {
			qrPageMaxSize = *o.PageMaxSize
		}
		qPageMaxSize := swag.FormatInt64(qrPageMaxSize)
		if qPageMaxSize != "" {

			if err := r.SetQueryParam("page.max_size", qPageMaxSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page.token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page.token", qPageToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetLoggingUsage binds the parameter keys
func (o *GetLoggingUsageParams) bindParamKeys(formats strfmt.Registry) []string {
	keysIR := o.Keys

	var keysIC []string
	for _, keysIIR := range keysIR { // explode []string

		keysIIV := keysIIR // string as string
		keysIC = append(keysIC, keysIIV)
	}

	// items.CollectionFormat: "multi"
	keysIS := swag.JoinByFormat(keysIC, "multi")

	return keysIS
}
