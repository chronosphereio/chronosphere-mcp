// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListEventFieldValuesParams creates a new ListEventFieldValuesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListEventFieldValuesParams() *ListEventFieldValuesParams {
	return &ListEventFieldValuesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListEventFieldValuesParamsWithTimeout creates a new ListEventFieldValuesParams object
// with the ability to set a timeout on a request.
func NewListEventFieldValuesParamsWithTimeout(timeout time.Duration) *ListEventFieldValuesParams {
	return &ListEventFieldValuesParams{
		timeout: timeout,
	}
}

// NewListEventFieldValuesParamsWithContext creates a new ListEventFieldValuesParams object
// with the ability to set a context for a request.
func NewListEventFieldValuesParamsWithContext(ctx context.Context) *ListEventFieldValuesParams {
	return &ListEventFieldValuesParams{
		Context: ctx,
	}
}

// NewListEventFieldValuesParamsWithHTTPClient creates a new ListEventFieldValuesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListEventFieldValuesParamsWithHTTPClient(client *http.Client) *ListEventFieldValuesParams {
	return &ListEventFieldValuesParams{
		HTTPClient: client,
	}
}

/*
ListEventFieldValuesParams contains all the parameters to send to the API endpoint

	for the list event field values operation.

	Typically these are written to a http.Request.
*/
type ListEventFieldValuesParams struct {

	/* AutocompleteIndex.

	   The index of the incomplete field in the query to generate values for. Ignored if no query is set.

	   Format: int64
	*/
	AutocompleteIndex *string

	/* Field.

	   The field for which to look up possible values for.
	*/
	Field *string

	/* LabelName.

	   Required if field is set to label name, otherwise should not be set.
	*/
	LabelName *string

	/* Query.

	     The current query subject to autocompletion. The query will be parsed, and current filters applied to limit the
	results returned based on context. If the query cannot be parsed, all values for the field are returned.
	Only one of `query` or `scope` can be set.
	*/
	Query *string

	/* ScopeCategories.

	   The list of categories to scope event field values by.
	*/
	ScopeCategories []string

	/* ScopeSources.

	   The list of sources to scope event field values by.
	*/
	ScopeSources []string

	/* ScopeTypes.

	   The list of types to scope event field values by.
	*/
	ScopeTypes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list event field values params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListEventFieldValuesParams) WithDefaults() *ListEventFieldValuesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list event field values params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListEventFieldValuesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list event field values params
func (o *ListEventFieldValuesParams) WithTimeout(timeout time.Duration) *ListEventFieldValuesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list event field values params
func (o *ListEventFieldValuesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list event field values params
func (o *ListEventFieldValuesParams) WithContext(ctx context.Context) *ListEventFieldValuesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list event field values params
func (o *ListEventFieldValuesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list event field values params
func (o *ListEventFieldValuesParams) WithHTTPClient(client *http.Client) *ListEventFieldValuesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list event field values params
func (o *ListEventFieldValuesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutocompleteIndex adds the autocompleteIndex to the list event field values params
func (o *ListEventFieldValuesParams) WithAutocompleteIndex(autocompleteIndex *string) *ListEventFieldValuesParams {
	o.SetAutocompleteIndex(autocompleteIndex)
	return o
}

// SetAutocompleteIndex adds the autocompleteIndex to the list event field values params
func (o *ListEventFieldValuesParams) SetAutocompleteIndex(autocompleteIndex *string) {
	o.AutocompleteIndex = autocompleteIndex
}

// WithField adds the field to the list event field values params
func (o *ListEventFieldValuesParams) WithField(field *string) *ListEventFieldValuesParams {
	o.SetField(field)
	return o
}

// SetField adds the field to the list event field values params
func (o *ListEventFieldValuesParams) SetField(field *string) {
	o.Field = field
}

// WithLabelName adds the labelName to the list event field values params
func (o *ListEventFieldValuesParams) WithLabelName(labelName *string) *ListEventFieldValuesParams {
	o.SetLabelName(labelName)
	return o
}

// SetLabelName adds the labelName to the list event field values params
func (o *ListEventFieldValuesParams) SetLabelName(labelName *string) {
	o.LabelName = labelName
}

// WithQuery adds the query to the list event field values params
func (o *ListEventFieldValuesParams) WithQuery(query *string) *ListEventFieldValuesParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list event field values params
func (o *ListEventFieldValuesParams) SetQuery(query *string) {
	o.Query = query
}

// WithScopeCategories adds the scopeCategories to the list event field values params
func (o *ListEventFieldValuesParams) WithScopeCategories(scopeCategories []string) *ListEventFieldValuesParams {
	o.SetScopeCategories(scopeCategories)
	return o
}

// SetScopeCategories adds the scopeCategories to the list event field values params
func (o *ListEventFieldValuesParams) SetScopeCategories(scopeCategories []string) {
	o.ScopeCategories = scopeCategories
}

// WithScopeSources adds the scopeSources to the list event field values params
func (o *ListEventFieldValuesParams) WithScopeSources(scopeSources []string) *ListEventFieldValuesParams {
	o.SetScopeSources(scopeSources)
	return o
}

// SetScopeSources adds the scopeSources to the list event field values params
func (o *ListEventFieldValuesParams) SetScopeSources(scopeSources []string) {
	o.ScopeSources = scopeSources
}

// WithScopeTypes adds the scopeTypes to the list event field values params
func (o *ListEventFieldValuesParams) WithScopeTypes(scopeTypes []string) *ListEventFieldValuesParams {
	o.SetScopeTypes(scopeTypes)
	return o
}

// SetScopeTypes adds the scopeTypes to the list event field values params
func (o *ListEventFieldValuesParams) SetScopeTypes(scopeTypes []string) {
	o.ScopeTypes = scopeTypes
}

// WriteToRequest writes these params to a swagger request
func (o *ListEventFieldValuesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AutocompleteIndex != nil {

		// query param autocomplete_index
		var qrAutocompleteIndex string

		if o.AutocompleteIndex != nil {
			qrAutocompleteIndex = *o.AutocompleteIndex
		}
		qAutocompleteIndex := qrAutocompleteIndex
		if qAutocompleteIndex != "" {

			if err := r.SetQueryParam("autocomplete_index", qAutocompleteIndex); err != nil {
				return err
			}
		}
	}

	if o.Field != nil {

		// query param field
		var qrField string

		if o.Field != nil {
			qrField = *o.Field
		}
		qField := qrField
		if qField != "" {

			if err := r.SetQueryParam("field", qField); err != nil {
				return err
			}
		}
	}

	if o.LabelName != nil {

		// query param label_name
		var qrLabelName string

		if o.LabelName != nil {
			qrLabelName = *o.LabelName
		}
		qLabelName := qrLabelName
		if qLabelName != "" {

			if err := r.SetQueryParam("label_name", qLabelName); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.ScopeCategories != nil {

		// binding items for scope.categories
		joinedScopeCategories := o.bindParamScopeCategories(reg)

		// query array param scope.categories
		if err := r.SetQueryParam("scope.categories", joinedScopeCategories...); err != nil {
			return err
		}
	}

	if o.ScopeSources != nil {

		// binding items for scope.sources
		joinedScopeSources := o.bindParamScopeSources(reg)

		// query array param scope.sources
		if err := r.SetQueryParam("scope.sources", joinedScopeSources...); err != nil {
			return err
		}
	}

	if o.ScopeTypes != nil {

		// binding items for scope.types
		joinedScopeTypes := o.bindParamScopeTypes(reg)

		// query array param scope.types
		if err := r.SetQueryParam("scope.types", joinedScopeTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListEventFieldValues binds the parameter scope.categories
func (o *ListEventFieldValuesParams) bindParamScopeCategories(formats strfmt.Registry) []string {
	scopeCategoriesIR := o.ScopeCategories

	var scopeCategoriesIC []string
	for _, scopeCategoriesIIR := range scopeCategoriesIR { // explode []string

		scopeCategoriesIIV := scopeCategoriesIIR // string as string
		scopeCategoriesIC = append(scopeCategoriesIC, scopeCategoriesIIV)
	}

	// items.CollectionFormat: "multi"
	scopeCategoriesIS := swag.JoinByFormat(scopeCategoriesIC, "multi")

	return scopeCategoriesIS
}

// bindParamListEventFieldValues binds the parameter scope.sources
func (o *ListEventFieldValuesParams) bindParamScopeSources(formats strfmt.Registry) []string {
	scopeSourcesIR := o.ScopeSources

	var scopeSourcesIC []string
	for _, scopeSourcesIIR := range scopeSourcesIR { // explode []string

		scopeSourcesIIV := scopeSourcesIIR // string as string
		scopeSourcesIC = append(scopeSourcesIC, scopeSourcesIIV)
	}

	// items.CollectionFormat: "multi"
	scopeSourcesIS := swag.JoinByFormat(scopeSourcesIC, "multi")

	return scopeSourcesIS
}

// bindParamListEventFieldValues binds the parameter scope.types
func (o *ListEventFieldValuesParams) bindParamScopeTypes(formats strfmt.Registry) []string {
	scopeTypesIR := o.ScopeTypes

	var scopeTypesIC []string
	for _, scopeTypesIIR := range scopeTypesIR { // explode []string

		scopeTypesIIV := scopeTypesIIR // string as string
		scopeTypesIC = append(scopeTypesIC, scopeTypesIIV)
	}

	// items.CollectionFormat: "multi"
	scopeTypesIS := swag.JoinByFormat(scopeTypesIC, "multi")

	return scopeTypesIS
}
