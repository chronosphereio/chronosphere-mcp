// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListEventsParams creates a new ListEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListEventsParams() *ListEventsParams {
	return &ListEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListEventsParamsWithTimeout creates a new ListEventsParams object
// with the ability to set a timeout on a request.
func NewListEventsParamsWithTimeout(timeout time.Duration) *ListEventsParams {
	return &ListEventsParams{
		timeout: timeout,
	}
}

// NewListEventsParamsWithContext creates a new ListEventsParams object
// with the ability to set a context for a request.
func NewListEventsParamsWithContext(ctx context.Context) *ListEventsParams {
	return &ListEventsParams{
		Context: ctx,
	}
}

// NewListEventsParamsWithHTTPClient creates a new ListEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListEventsParamsWithHTTPClient(client *http.Client) *ListEventsParams {
	return &ListEventsParams{
		HTTPClient: client,
	}
}

/*
ListEventsParams contains all the parameters to send to the API endpoint

	for the list events operation.

	Typically these are written to a http.Request.
*/
type ListEventsParams struct {

	/* HappenedAfter.

	     Only events which happened_at after this time will be returned. If set, happened_before must also be set.
	If no time range is set, defaults to 1 hour ago.

	     Format: date-time
	*/
	HappenedAfter *strfmt.DateTime

	/* HappenedBefore.

	     Only events which happened_at before this will be returned. If set, happened_after must also be set.
	If no time range is set, defaults to now.

	     Format: date-time
	*/
	HappenedBefore *strfmt.DateTime

	/* PageMaxSize.

	     Page size preference (i.e. how many items are returned in the next
	page). If zero, the server will use a default. Regardless of what size
	is given, clients must never assume how many items will be returned.

	     Format: int64
	*/
	PageMaxSize *int64

	/* PageToken.

	     Opaque page token identifying which page to request. An empty token
	identifies the first page.
	*/
	PageToken *string

	/* Query.

	   A query string specifying the query.
	*/
	Query *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListEventsParams) WithDefaults() *ListEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListEventsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list events params
func (o *ListEventsParams) WithTimeout(timeout time.Duration) *ListEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list events params
func (o *ListEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list events params
func (o *ListEventsParams) WithContext(ctx context.Context) *ListEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list events params
func (o *ListEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list events params
func (o *ListEventsParams) WithHTTPClient(client *http.Client) *ListEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list events params
func (o *ListEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHappenedAfter adds the happenedAfter to the list events params
func (o *ListEventsParams) WithHappenedAfter(happenedAfter *strfmt.DateTime) *ListEventsParams {
	o.SetHappenedAfter(happenedAfter)
	return o
}

// SetHappenedAfter adds the happenedAfter to the list events params
func (o *ListEventsParams) SetHappenedAfter(happenedAfter *strfmt.DateTime) {
	o.HappenedAfter = happenedAfter
}

// WithHappenedBefore adds the happenedBefore to the list events params
func (o *ListEventsParams) WithHappenedBefore(happenedBefore *strfmt.DateTime) *ListEventsParams {
	o.SetHappenedBefore(happenedBefore)
	return o
}

// SetHappenedBefore adds the happenedBefore to the list events params
func (o *ListEventsParams) SetHappenedBefore(happenedBefore *strfmt.DateTime) {
	o.HappenedBefore = happenedBefore
}

// WithPageMaxSize adds the pageMaxSize to the list events params
func (o *ListEventsParams) WithPageMaxSize(pageMaxSize *int64) *ListEventsParams {
	o.SetPageMaxSize(pageMaxSize)
	return o
}

// SetPageMaxSize adds the pageMaxSize to the list events params
func (o *ListEventsParams) SetPageMaxSize(pageMaxSize *int64) {
	o.PageMaxSize = pageMaxSize
}

// WithPageToken adds the pageToken to the list events params
func (o *ListEventsParams) WithPageToken(pageToken *string) *ListEventsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the list events params
func (o *ListEventsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithQuery adds the query to the list events params
func (o *ListEventsParams) WithQuery(query *string) *ListEventsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list events params
func (o *ListEventsParams) SetQuery(query *string) {
	o.Query = query
}

// WriteToRequest writes these params to a swagger request
func (o *ListEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HappenedAfter != nil {

		// query param happened_after
		var qrHappenedAfter strfmt.DateTime

		if o.HappenedAfter != nil {
			qrHappenedAfter = *o.HappenedAfter
		}
		qHappenedAfter := qrHappenedAfter.String()
		if qHappenedAfter != "" {

			if err := r.SetQueryParam("happened_after", qHappenedAfter); err != nil {
				return err
			}
		}
	}

	if o.HappenedBefore != nil {

		// query param happened_before
		var qrHappenedBefore strfmt.DateTime

		if o.HappenedBefore != nil {
			qrHappenedBefore = *o.HappenedBefore
		}
		qHappenedBefore := qrHappenedBefore.String()
		if qHappenedBefore != "" {

			if err := r.SetQueryParam("happened_before", qHappenedBefore); err != nil {
				return err
			}
		}
	}

	if o.PageMaxSize != nil {

		// query param page.max_size
		var qrPageMaxSize int64

		if o.PageMaxSize != nil {
			qrPageMaxSize = *o.PageMaxSize
		}
		qPageMaxSize := swag.FormatInt64(qrPageMaxSize)
		if qPageMaxSize != "" {

			if err := r.SetQueryParam("page.max_size", qPageMaxSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page.token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page.token", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
