// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListLogsParams creates a new ListLogsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListLogsParams() *ListLogsParams {
	return &ListLogsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListLogsParamsWithTimeout creates a new ListLogsParams object
// with the ability to set a timeout on a request.
func NewListLogsParamsWithTimeout(timeout time.Duration) *ListLogsParams {
	return &ListLogsParams{
		timeout: timeout,
	}
}

// NewListLogsParamsWithContext creates a new ListLogsParams object
// with the ability to set a context for a request.
func NewListLogsParamsWithContext(ctx context.Context) *ListLogsParams {
	return &ListLogsParams{
		Context: ctx,
	}
}

// NewListLogsParamsWithHTTPClient creates a new ListLogsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListLogsParamsWithHTTPClient(client *http.Client) *ListLogsParams {
	return &ListLogsParams{
		HTTPClient: client,
	}
}

/*
ListLogsParams contains all the parameters to send to the API endpoint

	for the list logs operation.

	Typically these are written to a http.Request.
*/
type ListLogsParams struct {

	/* LogFilterHappenedAfter.

	   Only log messages with a timestamp after this time will be returned.

	   Format: date-time
	*/
	LogFilterHappenedAfter *strfmt.DateTime

	/* LogFilterHappenedBefore.

	   Only log messages with a timestamp before this time will be returned.

	   Format: date-time
	*/
	LogFilterHappenedBefore *strfmt.DateTime

	/* LogFilterQuery.

	   Specifies the query to run to filter logs. Query defined using logql.
	*/
	LogFilterQuery *string

	/* PageMaxSize.

	     Page size preference (i.e. how many items are returned in the next
	page). If zero, the server will use a default. Regardless of what size
	is given, clients must never assume how many items will be returned.

	     Format: int64
	*/
	PageMaxSize *int64

	/* PageToken.

	     Opaque page token identifying which page to request. An empty token
	identifies the first page.
	*/
	PageToken *string

	/* PinnedLogID.

	   The ID of the log to be pinned.
	*/
	PinnedLogID *string

	/* TimestampSort.

	     Specifies sort order for returned logs. We only support sorting logs by timestamp.
	Default value is DESC (most recent logs first).
	*/
	TimestampSort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListLogsParams) WithDefaults() *ListLogsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list logs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListLogsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list logs params
func (o *ListLogsParams) WithTimeout(timeout time.Duration) *ListLogsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list logs params
func (o *ListLogsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list logs params
func (o *ListLogsParams) WithContext(ctx context.Context) *ListLogsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list logs params
func (o *ListLogsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list logs params
func (o *ListLogsParams) WithHTTPClient(client *http.Client) *ListLogsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list logs params
func (o *ListLogsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLogFilterHappenedAfter adds the logFilterHappenedAfter to the list logs params
func (o *ListLogsParams) WithLogFilterHappenedAfter(logFilterHappenedAfter *strfmt.DateTime) *ListLogsParams {
	o.SetLogFilterHappenedAfter(logFilterHappenedAfter)
	return o
}

// SetLogFilterHappenedAfter adds the logFilterHappenedAfter to the list logs params
func (o *ListLogsParams) SetLogFilterHappenedAfter(logFilterHappenedAfter *strfmt.DateTime) {
	o.LogFilterHappenedAfter = logFilterHappenedAfter
}

// WithLogFilterHappenedBefore adds the logFilterHappenedBefore to the list logs params
func (o *ListLogsParams) WithLogFilterHappenedBefore(logFilterHappenedBefore *strfmt.DateTime) *ListLogsParams {
	o.SetLogFilterHappenedBefore(logFilterHappenedBefore)
	return o
}

// SetLogFilterHappenedBefore adds the logFilterHappenedBefore to the list logs params
func (o *ListLogsParams) SetLogFilterHappenedBefore(logFilterHappenedBefore *strfmt.DateTime) {
	o.LogFilterHappenedBefore = logFilterHappenedBefore
}

// WithLogFilterQuery adds the logFilterQuery to the list logs params
func (o *ListLogsParams) WithLogFilterQuery(logFilterQuery *string) *ListLogsParams {
	o.SetLogFilterQuery(logFilterQuery)
	return o
}

// SetLogFilterQuery adds the logFilterQuery to the list logs params
func (o *ListLogsParams) SetLogFilterQuery(logFilterQuery *string) {
	o.LogFilterQuery = logFilterQuery
}

// WithPageMaxSize adds the pageMaxSize to the list logs params
func (o *ListLogsParams) WithPageMaxSize(pageMaxSize *int64) *ListLogsParams {
	o.SetPageMaxSize(pageMaxSize)
	return o
}

// SetPageMaxSize adds the pageMaxSize to the list logs params
func (o *ListLogsParams) SetPageMaxSize(pageMaxSize *int64) {
	o.PageMaxSize = pageMaxSize
}

// WithPageToken adds the pageToken to the list logs params
func (o *ListLogsParams) WithPageToken(pageToken *string) *ListLogsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the list logs params
func (o *ListLogsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithPinnedLogID adds the pinnedLogID to the list logs params
func (o *ListLogsParams) WithPinnedLogID(pinnedLogID *string) *ListLogsParams {
	o.SetPinnedLogID(pinnedLogID)
	return o
}

// SetPinnedLogID adds the pinnedLogId to the list logs params
func (o *ListLogsParams) SetPinnedLogID(pinnedLogID *string) {
	o.PinnedLogID = pinnedLogID
}

// WithTimestampSort adds the timestampSort to the list logs params
func (o *ListLogsParams) WithTimestampSort(timestampSort *string) *ListLogsParams {
	o.SetTimestampSort(timestampSort)
	return o
}

// SetTimestampSort adds the timestampSort to the list logs params
func (o *ListLogsParams) SetTimestampSort(timestampSort *string) {
	o.TimestampSort = timestampSort
}

// WriteToRequest writes these params to a swagger request
func (o *ListLogsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LogFilterHappenedAfter != nil {

		// query param log_filter.happened_after
		var qrLogFilterHappenedAfter strfmt.DateTime

		if o.LogFilterHappenedAfter != nil {
			qrLogFilterHappenedAfter = *o.LogFilterHappenedAfter
		}
		qLogFilterHappenedAfter := qrLogFilterHappenedAfter.String()
		if qLogFilterHappenedAfter != "" {

			if err := r.SetQueryParam("log_filter.happened_after", qLogFilterHappenedAfter); err != nil {
				return err
			}
		}
	}

	if o.LogFilterHappenedBefore != nil {

		// query param log_filter.happened_before
		var qrLogFilterHappenedBefore strfmt.DateTime

		if o.LogFilterHappenedBefore != nil {
			qrLogFilterHappenedBefore = *o.LogFilterHappenedBefore
		}
		qLogFilterHappenedBefore := qrLogFilterHappenedBefore.String()
		if qLogFilterHappenedBefore != "" {

			if err := r.SetQueryParam("log_filter.happened_before", qLogFilterHappenedBefore); err != nil {
				return err
			}
		}
	}

	if o.LogFilterQuery != nil {

		// query param log_filter.query
		var qrLogFilterQuery string

		if o.LogFilterQuery != nil {
			qrLogFilterQuery = *o.LogFilterQuery
		}
		qLogFilterQuery := qrLogFilterQuery
		if qLogFilterQuery != "" {

			if err := r.SetQueryParam("log_filter.query", qLogFilterQuery); err != nil {
				return err
			}
		}
	}

	if o.PageMaxSize != nil {

		// query param page.max_size
		var qrPageMaxSize int64

		if o.PageMaxSize != nil {
			qrPageMaxSize = *o.PageMaxSize
		}
		qPageMaxSize := swag.FormatInt64(qrPageMaxSize)
		if qPageMaxSize != "" {

			if err := r.SetQueryParam("page.max_size", qPageMaxSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param page.token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page.token", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.PinnedLogID != nil {

		// query param pinned_log_id
		var qrPinnedLogID string

		if o.PinnedLogID != nil {
			qrPinnedLogID = *o.PinnedLogID
		}
		qPinnedLogID := qrPinnedLogID
		if qPinnedLogID != "" {

			if err := r.SetQueryParam("pinned_log_id", qPinnedLogID); err != nil {
				return err
			}
		}
	}

	if o.TimestampSort != nil {

		// query param timestamp_sort
		var qrTimestampSort string

		if o.TimestampSort != nil {
			qrTimestampSort = *o.TimestampSort
		}
		qTimestampSort := qrTimestampSort
		if qTimestampSort != "" {

			if err := r.SetQueryParam("timestamp_sort", qTimestampSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
