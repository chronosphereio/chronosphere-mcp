// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPollListLogsQueryParams creates a new PollListLogsQueryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPollListLogsQueryParams() *PollListLogsQueryParams {
	return &PollListLogsQueryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPollListLogsQueryParamsWithTimeout creates a new PollListLogsQueryParams object
// with the ability to set a timeout on a request.
func NewPollListLogsQueryParamsWithTimeout(timeout time.Duration) *PollListLogsQueryParams {
	return &PollListLogsQueryParams{
		timeout: timeout,
	}
}

// NewPollListLogsQueryParamsWithContext creates a new PollListLogsQueryParams object
// with the ability to set a context for a request.
func NewPollListLogsQueryParamsWithContext(ctx context.Context) *PollListLogsQueryParams {
	return &PollListLogsQueryParams{
		Context: ctx,
	}
}

// NewPollListLogsQueryParamsWithHTTPClient creates a new PollListLogsQueryParams object
// with the ability to set a custom HTTPClient for a request.
func NewPollListLogsQueryParamsWithHTTPClient(client *http.Client) *PollListLogsQueryParams {
	return &PollListLogsQueryParams{
		HTTPClient: client,
	}
}

/*
PollListLogsQueryParams contains all the parameters to send to the API endpoint

	for the poll list logs query operation.

	Typically these are written to a http.Request.
*/
type PollListLogsQueryParams struct {

	// QueryID.
	QueryID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the poll list logs query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PollListLogsQueryParams) WithDefaults() *PollListLogsQueryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the poll list logs query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PollListLogsQueryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the poll list logs query params
func (o *PollListLogsQueryParams) WithTimeout(timeout time.Duration) *PollListLogsQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the poll list logs query params
func (o *PollListLogsQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the poll list logs query params
func (o *PollListLogsQueryParams) WithContext(ctx context.Context) *PollListLogsQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the poll list logs query params
func (o *PollListLogsQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the poll list logs query params
func (o *PollListLogsQueryParams) WithHTTPClient(client *http.Client) *PollListLogsQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the poll list logs query params
func (o *PollListLogsQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQueryID adds the queryID to the poll list logs query params
func (o *PollListLogsQueryParams) WithQueryID(queryID *string) *PollListLogsQueryParams {
	o.SetQueryID(queryID)
	return o
}

// SetQueryID adds the queryId to the poll list logs query params
func (o *PollListLogsQueryParams) SetQueryID(queryID *string) {
	o.QueryID = queryID
}

// WriteToRequest writes these params to a swagger request
func (o *PollListLogsQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.QueryID != nil {

		// query param query_id
		var qrQueryID string

		if o.QueryID != nil {
			qrQueryID = *o.QueryID
		}
		qQueryID := qrQueryID
		if qQueryID != "" {

			if err := r.SetQueryParam("query_id", qQueryID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
