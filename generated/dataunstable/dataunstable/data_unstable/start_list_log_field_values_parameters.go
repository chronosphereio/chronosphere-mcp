// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStartListLogFieldValuesParams creates a new StartListLogFieldValuesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStartListLogFieldValuesParams() *StartListLogFieldValuesParams {
	return &StartListLogFieldValuesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStartListLogFieldValuesParamsWithTimeout creates a new StartListLogFieldValuesParams object
// with the ability to set a timeout on a request.
func NewStartListLogFieldValuesParamsWithTimeout(timeout time.Duration) *StartListLogFieldValuesParams {
	return &StartListLogFieldValuesParams{
		timeout: timeout,
	}
}

// NewStartListLogFieldValuesParamsWithContext creates a new StartListLogFieldValuesParams object
// with the ability to set a context for a request.
func NewStartListLogFieldValuesParamsWithContext(ctx context.Context) *StartListLogFieldValuesParams {
	return &StartListLogFieldValuesParams{
		Context: ctx,
	}
}

// NewStartListLogFieldValuesParamsWithHTTPClient creates a new StartListLogFieldValuesParams object
// with the ability to set a custom HTTPClient for a request.
func NewStartListLogFieldValuesParamsWithHTTPClient(client *http.Client) *StartListLogFieldValuesParams {
	return &StartListLogFieldValuesParams{
		HTTPClient: client,
	}
}

/*
StartListLogFieldValuesParams contains all the parameters to send to the API endpoint

	for the start list log field values operation.

	Typically these are written to a http.Request.
*/
type StartListLogFieldValuesParams struct {

	// FieldName.
	FieldName *string

	// Limit.
	//
	// Format: int64
	Limit *int64

	/* LogFilterHappenedAfter.

	   Only log messages with a timestamp after this time will be returned.

	   Format: date-time
	*/
	LogFilterHappenedAfter *strfmt.DateTime

	/* LogFilterHappenedBefore.

	   Only log messages with a timestamp before this time will be returned.

	   Format: date-time
	*/
	LogFilterHappenedBefore *strfmt.DateTime

	/* LogFilterQuery.

	   Specifies the query to run to filter logs. Query defined using logql.
	*/
	LogFilterQuery *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the start list log field values params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartListLogFieldValuesParams) WithDefaults() *StartListLogFieldValuesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the start list log field values params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartListLogFieldValuesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the start list log field values params
func (o *StartListLogFieldValuesParams) WithTimeout(timeout time.Duration) *StartListLogFieldValuesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the start list log field values params
func (o *StartListLogFieldValuesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the start list log field values params
func (o *StartListLogFieldValuesParams) WithContext(ctx context.Context) *StartListLogFieldValuesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the start list log field values params
func (o *StartListLogFieldValuesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the start list log field values params
func (o *StartListLogFieldValuesParams) WithHTTPClient(client *http.Client) *StartListLogFieldValuesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the start list log field values params
func (o *StartListLogFieldValuesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFieldName adds the fieldName to the start list log field values params
func (o *StartListLogFieldValuesParams) WithFieldName(fieldName *string) *StartListLogFieldValuesParams {
	o.SetFieldName(fieldName)
	return o
}

// SetFieldName adds the fieldName to the start list log field values params
func (o *StartListLogFieldValuesParams) SetFieldName(fieldName *string) {
	o.FieldName = fieldName
}

// WithLimit adds the limit to the start list log field values params
func (o *StartListLogFieldValuesParams) WithLimit(limit *int64) *StartListLogFieldValuesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the start list log field values params
func (o *StartListLogFieldValuesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLogFilterHappenedAfter adds the logFilterHappenedAfter to the start list log field values params
func (o *StartListLogFieldValuesParams) WithLogFilterHappenedAfter(logFilterHappenedAfter *strfmt.DateTime) *StartListLogFieldValuesParams {
	o.SetLogFilterHappenedAfter(logFilterHappenedAfter)
	return o
}

// SetLogFilterHappenedAfter adds the logFilterHappenedAfter to the start list log field values params
func (o *StartListLogFieldValuesParams) SetLogFilterHappenedAfter(logFilterHappenedAfter *strfmt.DateTime) {
	o.LogFilterHappenedAfter = logFilterHappenedAfter
}

// WithLogFilterHappenedBefore adds the logFilterHappenedBefore to the start list log field values params
func (o *StartListLogFieldValuesParams) WithLogFilterHappenedBefore(logFilterHappenedBefore *strfmt.DateTime) *StartListLogFieldValuesParams {
	o.SetLogFilterHappenedBefore(logFilterHappenedBefore)
	return o
}

// SetLogFilterHappenedBefore adds the logFilterHappenedBefore to the start list log field values params
func (o *StartListLogFieldValuesParams) SetLogFilterHappenedBefore(logFilterHappenedBefore *strfmt.DateTime) {
	o.LogFilterHappenedBefore = logFilterHappenedBefore
}

// WithLogFilterQuery adds the logFilterQuery to the start list log field values params
func (o *StartListLogFieldValuesParams) WithLogFilterQuery(logFilterQuery *string) *StartListLogFieldValuesParams {
	o.SetLogFilterQuery(logFilterQuery)
	return o
}

// SetLogFilterQuery adds the logFilterQuery to the start list log field values params
func (o *StartListLogFieldValuesParams) SetLogFilterQuery(logFilterQuery *string) {
	o.LogFilterQuery = logFilterQuery
}

// WriteToRequest writes these params to a swagger request
func (o *StartListLogFieldValuesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FieldName != nil {

		// query param field_name
		var qrFieldName string

		if o.FieldName != nil {
			qrFieldName = *o.FieldName
		}
		qFieldName := qrFieldName
		if qFieldName != "" {

			if err := r.SetQueryParam("field_name", qFieldName); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.LogFilterHappenedAfter != nil {

		// query param log_filter.happened_after
		var qrLogFilterHappenedAfter strfmt.DateTime

		if o.LogFilterHappenedAfter != nil {
			qrLogFilterHappenedAfter = *o.LogFilterHappenedAfter
		}
		qLogFilterHappenedAfter := qrLogFilterHappenedAfter.String()
		if qLogFilterHappenedAfter != "" {

			if err := r.SetQueryParam("log_filter.happened_after", qLogFilterHappenedAfter); err != nil {
				return err
			}
		}
	}

	if o.LogFilterHappenedBefore != nil {

		// query param log_filter.happened_before
		var qrLogFilterHappenedBefore strfmt.DateTime

		if o.LogFilterHappenedBefore != nil {
			qrLogFilterHappenedBefore = *o.LogFilterHappenedBefore
		}
		qLogFilterHappenedBefore := qrLogFilterHappenedBefore.String()
		if qLogFilterHappenedBefore != "" {

			if err := r.SetQueryParam("log_filter.happened_before", qLogFilterHappenedBefore); err != nil {
				return err
			}
		}
	}

	if o.LogFilterQuery != nil {

		// query param log_filter.query
		var qrLogFilterQuery string

		if o.LogFilterQuery != nil {
			qrLogFilterQuery = *o.LogFilterQuery
		}
		qLogFilterQuery := qrLogFilterQuery
		if qLogFilterQuery != "" {

			if err := r.SetQueryParam("log_filter.query", qLogFilterQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
