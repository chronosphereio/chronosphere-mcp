// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStartLogHistogramParams creates a new StartLogHistogramParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStartLogHistogramParams() *StartLogHistogramParams {
	return &StartLogHistogramParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStartLogHistogramParamsWithTimeout creates a new StartLogHistogramParams object
// with the ability to set a timeout on a request.
func NewStartLogHistogramParamsWithTimeout(timeout time.Duration) *StartLogHistogramParams {
	return &StartLogHistogramParams{
		timeout: timeout,
	}
}

// NewStartLogHistogramParamsWithContext creates a new StartLogHistogramParams object
// with the ability to set a context for a request.
func NewStartLogHistogramParamsWithContext(ctx context.Context) *StartLogHistogramParams {
	return &StartLogHistogramParams{
		Context: ctx,
	}
}

// NewStartLogHistogramParamsWithHTTPClient creates a new StartLogHistogramParams object
// with the ability to set a custom HTTPClient for a request.
func NewStartLogHistogramParamsWithHTTPClient(client *http.Client) *StartLogHistogramParams {
	return &StartLogHistogramParams{
		HTTPClient: client,
	}
}

/*
StartLogHistogramParams contains all the parameters to send to the API endpoint

	for the start log histogram operation.

	Typically these are written to a http.Request.
*/
type StartLogHistogramParams struct {

	// GroupByFieldNames.
	GroupByFieldNames []string

	/* LogFilterHappenedAfter.

	   Only log messages with a timestamp after this time will be returned.

	   Format: date-time
	*/
	LogFilterHappenedAfter *strfmt.DateTime

	/* LogFilterHappenedBefore.

	   Only log messages with a timestamp before this time will be returned.

	   Format: date-time
	*/
	LogFilterHappenedBefore *strfmt.DateTime

	/* LogFilterQuery.

	   Specifies the query to run to filter logs. Query defined using logql.
	*/
	LogFilterQuery *string

	/* StepSize.

	   Duration each bucket in histogram should have. Must be greater than 10 seconds.
	*/
	StepSize *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the start log histogram params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartLogHistogramParams) WithDefaults() *StartLogHistogramParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the start log histogram params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartLogHistogramParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the start log histogram params
func (o *StartLogHistogramParams) WithTimeout(timeout time.Duration) *StartLogHistogramParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the start log histogram params
func (o *StartLogHistogramParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the start log histogram params
func (o *StartLogHistogramParams) WithContext(ctx context.Context) *StartLogHistogramParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the start log histogram params
func (o *StartLogHistogramParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the start log histogram params
func (o *StartLogHistogramParams) WithHTTPClient(client *http.Client) *StartLogHistogramParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the start log histogram params
func (o *StartLogHistogramParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupByFieldNames adds the groupByFieldNames to the start log histogram params
func (o *StartLogHistogramParams) WithGroupByFieldNames(groupByFieldNames []string) *StartLogHistogramParams {
	o.SetGroupByFieldNames(groupByFieldNames)
	return o
}

// SetGroupByFieldNames adds the groupByFieldNames to the start log histogram params
func (o *StartLogHistogramParams) SetGroupByFieldNames(groupByFieldNames []string) {
	o.GroupByFieldNames = groupByFieldNames
}

// WithLogFilterHappenedAfter adds the logFilterHappenedAfter to the start log histogram params
func (o *StartLogHistogramParams) WithLogFilterHappenedAfter(logFilterHappenedAfter *strfmt.DateTime) *StartLogHistogramParams {
	o.SetLogFilterHappenedAfter(logFilterHappenedAfter)
	return o
}

// SetLogFilterHappenedAfter adds the logFilterHappenedAfter to the start log histogram params
func (o *StartLogHistogramParams) SetLogFilterHappenedAfter(logFilterHappenedAfter *strfmt.DateTime) {
	o.LogFilterHappenedAfter = logFilterHappenedAfter
}

// WithLogFilterHappenedBefore adds the logFilterHappenedBefore to the start log histogram params
func (o *StartLogHistogramParams) WithLogFilterHappenedBefore(logFilterHappenedBefore *strfmt.DateTime) *StartLogHistogramParams {
	o.SetLogFilterHappenedBefore(logFilterHappenedBefore)
	return o
}

// SetLogFilterHappenedBefore adds the logFilterHappenedBefore to the start log histogram params
func (o *StartLogHistogramParams) SetLogFilterHappenedBefore(logFilterHappenedBefore *strfmt.DateTime) {
	o.LogFilterHappenedBefore = logFilterHappenedBefore
}

// WithLogFilterQuery adds the logFilterQuery to the start log histogram params
func (o *StartLogHistogramParams) WithLogFilterQuery(logFilterQuery *string) *StartLogHistogramParams {
	o.SetLogFilterQuery(logFilterQuery)
	return o
}

// SetLogFilterQuery adds the logFilterQuery to the start log histogram params
func (o *StartLogHistogramParams) SetLogFilterQuery(logFilterQuery *string) {
	o.LogFilterQuery = logFilterQuery
}

// WithStepSize adds the stepSize to the start log histogram params
func (o *StartLogHistogramParams) WithStepSize(stepSize *string) *StartLogHistogramParams {
	o.SetStepSize(stepSize)
	return o
}

// SetStepSize adds the stepSize to the start log histogram params
func (o *StartLogHistogramParams) SetStepSize(stepSize *string) {
	o.StepSize = stepSize
}

// WriteToRequest writes these params to a swagger request
func (o *StartLogHistogramParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.GroupByFieldNames != nil {

		// binding items for group_by.field_names
		joinedGroupByFieldNames := o.bindParamGroupByFieldNames(reg)

		// query array param group_by.field_names
		if err := r.SetQueryParam("group_by.field_names", joinedGroupByFieldNames...); err != nil {
			return err
		}
	}

	if o.LogFilterHappenedAfter != nil {

		// query param log_filter.happened_after
		var qrLogFilterHappenedAfter strfmt.DateTime

		if o.LogFilterHappenedAfter != nil {
			qrLogFilterHappenedAfter = *o.LogFilterHappenedAfter
		}
		qLogFilterHappenedAfter := qrLogFilterHappenedAfter.String()
		if qLogFilterHappenedAfter != "" {

			if err := r.SetQueryParam("log_filter.happened_after", qLogFilterHappenedAfter); err != nil {
				return err
			}
		}
	}

	if o.LogFilterHappenedBefore != nil {

		// query param log_filter.happened_before
		var qrLogFilterHappenedBefore strfmt.DateTime

		if o.LogFilterHappenedBefore != nil {
			qrLogFilterHappenedBefore = *o.LogFilterHappenedBefore
		}
		qLogFilterHappenedBefore := qrLogFilterHappenedBefore.String()
		if qLogFilterHappenedBefore != "" {

			if err := r.SetQueryParam("log_filter.happened_before", qLogFilterHappenedBefore); err != nil {
				return err
			}
		}
	}

	if o.LogFilterQuery != nil {

		// query param log_filter.query
		var qrLogFilterQuery string

		if o.LogFilterQuery != nil {
			qrLogFilterQuery = *o.LogFilterQuery
		}
		qLogFilterQuery := qrLogFilterQuery
		if qLogFilterQuery != "" {

			if err := r.SetQueryParam("log_filter.query", qLogFilterQuery); err != nil {
				return err
			}
		}
	}

	if o.StepSize != nil {

		// query param step_size
		var qrStepSize string

		if o.StepSize != nil {
			qrStepSize = *o.StepSize
		}
		qStepSize := qrStepSize
		if qStepSize != "" {

			if err := r.SetQueryParam("step_size", qStepSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamStartLogHistogram binds the parameter group_by.field_names
func (o *StartLogHistogramParams) bindParamGroupByFieldNames(formats strfmt.Registry) []string {
	groupByFieldNamesIR := o.GroupByFieldNames

	var groupByFieldNamesIC []string
	for _, groupByFieldNamesIIR := range groupByFieldNamesIR { // explode []string

		groupByFieldNamesIIV := groupByFieldNamesIIR // string as string
		groupByFieldNamesIC = append(groupByFieldNamesIC, groupByFieldNamesIIV)
	}

	// items.CollectionFormat: "multi"
	groupByFieldNamesIS := swag.JoinByFormat(groupByFieldNamesIC, "multi")

	return groupByFieldNamesIS
}
