// Code generated by go-swagger; DO NOT EDIT.

package data_unstable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewStartRangeQueryParams creates a new StartRangeQueryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStartRangeQueryParams() *StartRangeQueryParams {
	return &StartRangeQueryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStartRangeQueryParamsWithTimeout creates a new StartRangeQueryParams object
// with the ability to set a timeout on a request.
func NewStartRangeQueryParamsWithTimeout(timeout time.Duration) *StartRangeQueryParams {
	return &StartRangeQueryParams{
		timeout: timeout,
	}
}

// NewStartRangeQueryParamsWithContext creates a new StartRangeQueryParams object
// with the ability to set a context for a request.
func NewStartRangeQueryParamsWithContext(ctx context.Context) *StartRangeQueryParams {
	return &StartRangeQueryParams{
		Context: ctx,
	}
}

// NewStartRangeQueryParamsWithHTTPClient creates a new StartRangeQueryParams object
// with the ability to set a custom HTTPClient for a request.
func NewStartRangeQueryParamsWithHTTPClient(client *http.Client) *StartRangeQueryParams {
	return &StartRangeQueryParams{
		HTTPClient: client,
	}
}

/*
StartRangeQueryParams contains all the parameters to send to the API endpoint

	for the start range query operation.

	Typically these are written to a http.Request.
*/
type StartRangeQueryParams struct {

	/* PageToken.

	     Opaque page token identifying which page to request. An empty token
	identifies the first page.
	*/
	PageToken *string

	/* Query.

	   Specifies the query to run to filter logs. Query defined using logql.
	*/
	Query *string

	/* TimestampFilterHappenedAfter.

	   Only log messages with a timestamp after this time will be returned.

	   Format: date-time
	*/
	TimestampFilterHappenedAfter *strfmt.DateTime

	/* TimestampFilterHappenedBefore.

	   Only log messages with a timestamp before this time will be returned.

	   Format: date-time
	*/
	TimestampFilterHappenedBefore *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the start range query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartRangeQueryParams) WithDefaults() *StartRangeQueryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the start range query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartRangeQueryParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the start range query params
func (o *StartRangeQueryParams) WithTimeout(timeout time.Duration) *StartRangeQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the start range query params
func (o *StartRangeQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the start range query params
func (o *StartRangeQueryParams) WithContext(ctx context.Context) *StartRangeQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the start range query params
func (o *StartRangeQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the start range query params
func (o *StartRangeQueryParams) WithHTTPClient(client *http.Client) *StartRangeQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the start range query params
func (o *StartRangeQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageToken adds the pageToken to the start range query params
func (o *StartRangeQueryParams) WithPageToken(pageToken *string) *StartRangeQueryParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the start range query params
func (o *StartRangeQueryParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithQuery adds the query to the start range query params
func (o *StartRangeQueryParams) WithQuery(query *string) *StartRangeQueryParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the start range query params
func (o *StartRangeQueryParams) SetQuery(query *string) {
	o.Query = query
}

// WithTimestampFilterHappenedAfter adds the timestampFilterHappenedAfter to the start range query params
func (o *StartRangeQueryParams) WithTimestampFilterHappenedAfter(timestampFilterHappenedAfter *strfmt.DateTime) *StartRangeQueryParams {
	o.SetTimestampFilterHappenedAfter(timestampFilterHappenedAfter)
	return o
}

// SetTimestampFilterHappenedAfter adds the timestampFilterHappenedAfter to the start range query params
func (o *StartRangeQueryParams) SetTimestampFilterHappenedAfter(timestampFilterHappenedAfter *strfmt.DateTime) {
	o.TimestampFilterHappenedAfter = timestampFilterHappenedAfter
}

// WithTimestampFilterHappenedBefore adds the timestampFilterHappenedBefore to the start range query params
func (o *StartRangeQueryParams) WithTimestampFilterHappenedBefore(timestampFilterHappenedBefore *strfmt.DateTime) *StartRangeQueryParams {
	o.SetTimestampFilterHappenedBefore(timestampFilterHappenedBefore)
	return o
}

// SetTimestampFilterHappenedBefore adds the timestampFilterHappenedBefore to the start range query params
func (o *StartRangeQueryParams) SetTimestampFilterHappenedBefore(timestampFilterHappenedBefore *strfmt.DateTime) {
	o.TimestampFilterHappenedBefore = timestampFilterHappenedBefore
}

// WriteToRequest writes these params to a swagger request
func (o *StartRangeQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PageToken != nil {

		// query param page.token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page.token", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.TimestampFilterHappenedAfter != nil {

		// query param timestamp_filter.happened_after
		var qrTimestampFilterHappenedAfter strfmt.DateTime

		if o.TimestampFilterHappenedAfter != nil {
			qrTimestampFilterHappenedAfter = *o.TimestampFilterHappenedAfter
		}
		qTimestampFilterHappenedAfter := qrTimestampFilterHappenedAfter.String()
		if qTimestampFilterHappenedAfter != "" {

			if err := r.SetQueryParam("timestamp_filter.happened_after", qTimestampFilterHappenedAfter); err != nil {
				return err
			}
		}
	}

	if o.TimestampFilterHappenedBefore != nil {

		// query param timestamp_filter.happened_before
		var qrTimestampFilterHappenedBefore strfmt.DateTime

		if o.TimestampFilterHappenedBefore != nil {
			qrTimestampFilterHappenedBefore = *o.TimestampFilterHappenedBefore
		}
		qTimestampFilterHappenedBefore := qrTimestampFilterHappenedBefore.String()
		if qTimestampFilterHappenedBefore != "" {

			if err := r.SetQueryParam("timestamp_filter.happened_before", qTimestampFilterHappenedBefore); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
