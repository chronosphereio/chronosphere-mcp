// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AnalyzeAlertsRequestAlertFilter AlertFilter contains semantic filter options for alert analysis queries (list, aggregate, etc).
// IMPORTANT: ALL fields in this message now use AND semantics when combined.
// To achieve OR semantics between criteria, use multiple AlertFilter instances
// with alert_filters_combine_mode = OR in the request.
//
// swagger:model AnalyzeAlertsRequestAlertFilter
type AnalyzeAlertsRequestAlertFilter struct {

	// Filter alerts by mute status
	IsMuted bool `json:"is_muted,omitempty"`

	// Optional: limit considered alerts to those having the given monitor labels.
	MonitorLabels *AnalyzeAlertsRequestLabelsMatcher `json:"monitor_labels,omitempty"`

	// Optional: limit considered alerts to those from a specific monitor.
	MonitorSlug *AnalyzeAlertsRequestStringMatcher `json:"monitor_slug,omitempty"`

	// Optional: limit considered alerts to those from a specific notification policy.
	NotificationPolicySlug *AnalyzeAlertsRequestStringMatcher `json:"notification_policy_slug,omitempty"`

	// Optional: limit considered alerts to those having the given signals.
	Signals *AnalyzeAlertsRequestLabelsMatcher `json:"signals,omitempty"`
}

// Validate validates this analyze alerts request alert filter
func (m *AnalyzeAlertsRequestAlertFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMonitorLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonitorSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationPolicySlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyzeAlertsRequestAlertFilter) validateMonitorLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.MonitorLabels) { // not required
		return nil
	}

	if m.MonitorLabels != nil {
		if err := m.MonitorLabels.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor_labels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor_labels")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyzeAlertsRequestAlertFilter) validateMonitorSlug(formats strfmt.Registry) error {
	if swag.IsZero(m.MonitorSlug) { // not required
		return nil
	}

	if m.MonitorSlug != nil {
		if err := m.MonitorSlug.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor_slug")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor_slug")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyzeAlertsRequestAlertFilter) validateNotificationPolicySlug(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationPolicySlug) { // not required
		return nil
	}

	if m.NotificationPolicySlug != nil {
		if err := m.NotificationPolicySlug.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification_policy_slug")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notification_policy_slug")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyzeAlertsRequestAlertFilter) validateSignals(formats strfmt.Registry) error {
	if swag.IsZero(m.Signals) { // not required
		return nil
	}

	if m.Signals != nil {
		if err := m.Signals.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signals")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this analyze alerts request alert filter based on the context it is used
func (m *AnalyzeAlertsRequestAlertFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMonitorLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonitorSlug(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotificationPolicySlug(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyzeAlertsRequestAlertFilter) contextValidateMonitorLabels(ctx context.Context, formats strfmt.Registry) error {

	if m.MonitorLabels != nil {

		if swag.IsZero(m.MonitorLabels) { // not required
			return nil
		}

		if err := m.MonitorLabels.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor_labels")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor_labels")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyzeAlertsRequestAlertFilter) contextValidateMonitorSlug(ctx context.Context, formats strfmt.Registry) error {

	if m.MonitorSlug != nil {

		if swag.IsZero(m.MonitorSlug) { // not required
			return nil
		}

		if err := m.MonitorSlug.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monitor_slug")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monitor_slug")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyzeAlertsRequestAlertFilter) contextValidateNotificationPolicySlug(ctx context.Context, formats strfmt.Registry) error {

	if m.NotificationPolicySlug != nil {

		if swag.IsZero(m.NotificationPolicySlug) { // not required
			return nil
		}

		if err := m.NotificationPolicySlug.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notification_policy_slug")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notification_policy_slug")
			}
			return err
		}
	}

	return nil
}

func (m *AnalyzeAlertsRequestAlertFilter) contextValidateSignals(ctx context.Context, formats strfmt.Registry) error {

	if m.Signals != nil {

		if swag.IsZero(m.Signals) { // not required
			return nil
		}

		if err := m.Signals.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("signals")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("signals")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalyzeAlertsRequestAlertFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyzeAlertsRequestAlertFilter) UnmarshalBinary(b []byte) error {
	var res AnalyzeAlertsRequestAlertFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
