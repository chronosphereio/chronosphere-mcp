// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AnalyzeAlertsRequestStringMatcher StringMatcher provides advanced string matching operations.
// Used throughout the API for flexible filtering of string fields.
//
// swagger:model AnalyzeAlertsRequestStringMatcher
type AnalyzeAlertsRequestStringMatcher struct {

	// List of values for operations that work with multiple values (ANY_OF, NONE_OF)
	ListValues []string `json:"list_values"`

	// The type of matching operation to perform
	Operation AnalyzeAlertsRequestStringMatcherOperation `json:"operation,omitempty"`

	// Single value for operations that work with one value (EQUAL, REGEX_EQUAL, CONTAINS, etc.)
	SingleValue string `json:"single_value,omitempty"`
}

// Validate validates this analyze alerts request string matcher
func (m *AnalyzeAlertsRequestStringMatcher) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyzeAlertsRequestStringMatcher) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	if err := m.Operation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("operation")
		}
		return err
	}

	return nil
}

// ContextValidate validate this analyze alerts request string matcher based on the context it is used
func (m *AnalyzeAlertsRequestStringMatcher) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyzeAlertsRequestStringMatcher) contextValidateOperation(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	if err := m.Operation.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("operation")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AnalyzeAlertsRequestStringMatcher) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyzeAlertsRequestStringMatcher) UnmarshalBinary(b []byte) error {
	var res AnalyzeAlertsRequestStringMatcher
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
