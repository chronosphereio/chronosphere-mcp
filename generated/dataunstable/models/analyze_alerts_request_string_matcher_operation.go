// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AnalyzeAlertsRequestStringMatcherOperation StringMatcherOperation defines the type of string matching operation.
//
//   - EQUAL: Exact string equality
//   - REGEX_EQUAL: Regular expression matching
//   - CONTAINS: String contains (substring match)
//   - NOT_EQUAL: Not equal to string
//   - NOT_REGEX_EQUAL: Does not match regular expression
//   - NOT_CONTAINS: Does not contain (no substring match)
//   - ANY_OF: Matches any of the provided values
//   - NONE_OF: Matches none of the provided values
//
// swagger:model AnalyzeAlertsRequestStringMatcherOperation
type AnalyzeAlertsRequestStringMatcherOperation string

func NewAnalyzeAlertsRequestStringMatcherOperation(value AnalyzeAlertsRequestStringMatcherOperation) *AnalyzeAlertsRequestStringMatcherOperation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AnalyzeAlertsRequestStringMatcherOperation.
func (m AnalyzeAlertsRequestStringMatcherOperation) Pointer() *AnalyzeAlertsRequestStringMatcherOperation {
	return &m
}

const (

	// AnalyzeAlertsRequestStringMatcherOperationEQUAL captures enum value "EQUAL"
	AnalyzeAlertsRequestStringMatcherOperationEQUAL AnalyzeAlertsRequestStringMatcherOperation = "EQUAL"

	// AnalyzeAlertsRequestStringMatcherOperationREGEXEQUAL captures enum value "REGEX_EQUAL"
	AnalyzeAlertsRequestStringMatcherOperationREGEXEQUAL AnalyzeAlertsRequestStringMatcherOperation = "REGEX_EQUAL"

	// AnalyzeAlertsRequestStringMatcherOperationCONTAINS captures enum value "CONTAINS"
	AnalyzeAlertsRequestStringMatcherOperationCONTAINS AnalyzeAlertsRequestStringMatcherOperation = "CONTAINS"

	// AnalyzeAlertsRequestStringMatcherOperationNOTEQUAL captures enum value "NOT_EQUAL"
	AnalyzeAlertsRequestStringMatcherOperationNOTEQUAL AnalyzeAlertsRequestStringMatcherOperation = "NOT_EQUAL"

	// AnalyzeAlertsRequestStringMatcherOperationNOTREGEXEQUAL captures enum value "NOT_REGEX_EQUAL"
	AnalyzeAlertsRequestStringMatcherOperationNOTREGEXEQUAL AnalyzeAlertsRequestStringMatcherOperation = "NOT_REGEX_EQUAL"

	// AnalyzeAlertsRequestStringMatcherOperationNOTCONTAINS captures enum value "NOT_CONTAINS"
	AnalyzeAlertsRequestStringMatcherOperationNOTCONTAINS AnalyzeAlertsRequestStringMatcherOperation = "NOT_CONTAINS"

	// AnalyzeAlertsRequestStringMatcherOperationANYOF captures enum value "ANY_OF"
	AnalyzeAlertsRequestStringMatcherOperationANYOF AnalyzeAlertsRequestStringMatcherOperation = "ANY_OF"

	// AnalyzeAlertsRequestStringMatcherOperationNONEOF captures enum value "NONE_OF"
	AnalyzeAlertsRequestStringMatcherOperationNONEOF AnalyzeAlertsRequestStringMatcherOperation = "NONE_OF"
)

// for schema
var analyzeAlertsRequestStringMatcherOperationEnum []interface{}

func init() {
	var res []AnalyzeAlertsRequestStringMatcherOperation
	if err := json.Unmarshal([]byte(`["EQUAL","REGEX_EQUAL","CONTAINS","NOT_EQUAL","NOT_REGEX_EQUAL","NOT_CONTAINS","ANY_OF","NONE_OF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		analyzeAlertsRequestStringMatcherOperationEnum = append(analyzeAlertsRequestStringMatcherOperationEnum, v)
	}
}

func (m AnalyzeAlertsRequestStringMatcherOperation) validateAnalyzeAlertsRequestStringMatcherOperationEnum(path, location string, value AnalyzeAlertsRequestStringMatcherOperation) error {
	if err := validate.EnumCase(path, location, value, analyzeAlertsRequestStringMatcherOperationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this analyze alerts request string matcher operation
func (m AnalyzeAlertsRequestStringMatcherOperation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAnalyzeAlertsRequestStringMatcherOperationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this analyze alerts request string matcher operation based on context it is used
func (m AnalyzeAlertsRequestStringMatcherOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
