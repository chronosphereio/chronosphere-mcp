// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AnalyzeAlertsResponseSeverityChangeHistoryEntry SeverityChangeHistoryEntry represents a severity change during the alert lifecycle.
// Tracks when an alert's severity level changed over time.
//
// swagger:model AnalyzeAlertsResponseSeverityChangeHistoryEntry
type AnalyzeAlertsResponseSeverityChangeHistoryEntry struct {

	// The new severity level (e.g., "critical", "warning")
	Severity string `json:"severity,omitempty"`

	// When this severity change occurred
	// Format: date-time
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`
}

// Validate validates this analyze alerts response severity change history entry
func (m *AnalyzeAlertsResponseSeverityChangeHistoryEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AnalyzeAlertsResponseSeverityChangeHistoryEntry) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this analyze alerts response severity change history entry based on context it is used
func (m *AnalyzeAlertsResponseSeverityChangeHistoryEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AnalyzeAlertsResponseSeverityChangeHistoryEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AnalyzeAlertsResponseSeverityChangeHistoryEntry) UnmarshalBinary(b []byte) error {
	var res AnalyzeAlertsResponseSeverityChangeHistoryEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
