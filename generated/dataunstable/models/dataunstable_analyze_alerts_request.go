// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataunstableAnalyzeAlertsRequest AnalyzeAlertsRequest is the request for the AnalyzeAlerts API.
// Retrieves alerts (aggregated by alert_id) within a given time range that match the provided filters.
//
// swagger:model dataunstableAnalyzeAlertsRequest
type DataunstableAnalyzeAlertsRequest struct {

	// Semantic filters to apply to alerts
	AlertFilters []*AnalyzeAlertsRequestAlertFilter `json:"alert_filters"`

	// How to combine multiple alert filters (AND vs OR)
	AlertFiltersCombineMode AnalyzeAlertsRequestAlertFiltersCombineMode `json:"alert_filters_combine_mode,omitempty"`

	// Time range filter (required)
	TimeFilter *AnalyzeAlertsRequestTimeFilter `json:"time_filter,omitempty"`
}

// Validate validates this dataunstable analyze alerts request
func (m *DataunstableAnalyzeAlertsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertFilters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertFiltersCombineMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataunstableAnalyzeAlertsRequest) validateAlertFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertFilters); i++ {
		if swag.IsZero(m.AlertFilters[i]) { // not required
			continue
		}

		if m.AlertFilters[i] != nil {
			if err := m.AlertFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alert_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alert_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataunstableAnalyzeAlertsRequest) validateAlertFiltersCombineMode(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertFiltersCombineMode) { // not required
		return nil
	}

	if err := m.AlertFiltersCombineMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alert_filters_combine_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alert_filters_combine_mode")
		}
		return err
	}

	return nil
}

func (m *DataunstableAnalyzeAlertsRequest) validateTimeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeFilter) { // not required
		return nil
	}

	if m.TimeFilter != nil {
		if err := m.TimeFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time_filter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dataunstable analyze alerts request based on the context it is used
func (m *DataunstableAnalyzeAlertsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlertFiltersCombineMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataunstableAnalyzeAlertsRequest) contextValidateAlertFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AlertFilters); i++ {

		if m.AlertFilters[i] != nil {

			if swag.IsZero(m.AlertFilters[i]) { // not required
				return nil
			}

			if err := m.AlertFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("alert_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("alert_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DataunstableAnalyzeAlertsRequest) contextValidateAlertFiltersCombineMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.AlertFiltersCombineMode) { // not required
		return nil
	}

	if err := m.AlertFiltersCombineMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alert_filters_combine_mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alert_filters_combine_mode")
		}
		return err
	}

	return nil
}

func (m *DataunstableAnalyzeAlertsRequest) contextValidateTimeFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeFilter != nil {

		if swag.IsZero(m.TimeFilter) { // not required
			return nil
		}

		if err := m.TimeFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_filter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time_filter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataunstableAnalyzeAlertsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataunstableAnalyzeAlertsRequest) UnmarshalBinary(b []byte) error {
	var res DataunstableAnalyzeAlertsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
