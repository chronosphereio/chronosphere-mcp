// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DataunstableColumnMetaType dataunstable column meta type
//
// swagger:model dataunstableColumnMetaType
type DataunstableColumnMetaType string

func NewDataunstableColumnMetaType(value DataunstableColumnMetaType) *DataunstableColumnMetaType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DataunstableColumnMetaType.
func (m DataunstableColumnMetaType) Pointer() *DataunstableColumnMetaType {
	return &m
}

const (

	// DataunstableColumnMetaTypeBOOLEAN captures enum value "BOOLEAN"
	DataunstableColumnMetaTypeBOOLEAN DataunstableColumnMetaType = "BOOLEAN"

	// DataunstableColumnMetaTypeFLOAT captures enum value "FLOAT"
	DataunstableColumnMetaTypeFLOAT DataunstableColumnMetaType = "FLOAT"

	// DataunstableColumnMetaTypeSTRING captures enum value "STRING"
	DataunstableColumnMetaTypeSTRING DataunstableColumnMetaType = "STRING"
)

// for schema
var dataunstableColumnMetaTypeEnum []interface{}

func init() {
	var res []DataunstableColumnMetaType
	if err := json.Unmarshal([]byte(`["BOOLEAN","FLOAT","STRING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataunstableColumnMetaTypeEnum = append(dataunstableColumnMetaTypeEnum, v)
	}
}

func (m DataunstableColumnMetaType) validateDataunstableColumnMetaTypeEnum(path, location string, value DataunstableColumnMetaType) error {
	if err := validate.EnumCase(path, location, value, dataunstableColumnMetaTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dataunstable column meta type
func (m DataunstableColumnMetaType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDataunstableColumnMetaTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dataunstable column meta type based on context it is used
func (m DataunstableColumnMetaType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
