// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataunstableEvent dataunstable event
//
// swagger:model dataunstableEvent
type DataunstableEvent struct {

	// The category the event belongs to. Must be one of these categories:
	// `alerts`, `broadcasts`, `chronosphere`, `deploys`, `feature_flags`,
	// `infrastructure`, `third_party`.
	Category string `json:"category,omitempty"`

	// The time the event occurred. Must be between 24 hours in the past or 24 hours
	// in the future. Defaults to `now` if not specified.
	// Format: date-time
	HappenedAt strfmt.DateTime `json:"happened_at,omitempty"`

	// Unique identifier
	ID string `json:"id,omitempty"`

	// A string representation of the original event JSON. Max length 100,000 characters. Only json_payload or
	// raw_json_payload can be set.
	JSONPayload string `json:"json_payload,omitempty"`

	// Map of user-supplied key:value pairs associated with the event. Max 200 labels
	// per event. Key max length, 200 characters. Value max length, 5,000
	// characters.
	Labels map[string]string `json:"labels,omitempty"`

	// The JSON payload if the original event was in JSON format. Formatted as JSON. Max length,
	// 100,000 characters. Input Only. Only json_payload or raw_json_payload may be set.
	RawJSONPayload interface{} `json:"raw_json_payload,omitempty"`

	// Identifies where the data originated, in cases where a change to the
	// instrumentation or integration is needed. Max length, 50 characters.
	Source string `json:"source,omitempty"`

	// A short description of the event that occurred, such as an email subject.
	// Max length, 100 characters.
	Title string `json:"title,omitempty"`

	// The event type, used to group and differentiate events within a `category`
	// or `source`.
	Type string `json:"type,omitempty"`
}

// Validate validates this dataunstable event
func (m *DataunstableEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHappenedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataunstableEvent) validateHappenedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.HappenedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("happened_at", "body", "date-time", m.HappenedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dataunstable event based on context it is used
func (m *DataunstableEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataunstableEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataunstableEvent) UnmarshalBinary(b []byte) error {
	var res DataunstableEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
