// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DataunstableEventField dataunstable event field
//
// swagger:model dataunstableEventField
type DataunstableEventField string

func NewDataunstableEventField(value DataunstableEventField) *DataunstableEventField {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DataunstableEventField.
func (m DataunstableEventField) Pointer() *DataunstableEventField {
	return &m
}

const (

	// DataunstableEventFieldCATEGORYEVENTFIELD captures enum value "CATEGORY_EVENT_FIELD"
	DataunstableEventFieldCATEGORYEVENTFIELD DataunstableEventField = "CATEGORY_EVENT_FIELD"

	// DataunstableEventFieldTYPEEVENTFIELD captures enum value "TYPE_EVENT_FIELD"
	DataunstableEventFieldTYPEEVENTFIELD DataunstableEventField = "TYPE_EVENT_FIELD"

	// DataunstableEventFieldSOURCEEVENTFIELD captures enum value "SOURCE_EVENT_FIELD"
	DataunstableEventFieldSOURCEEVENTFIELD DataunstableEventField = "SOURCE_EVENT_FIELD"

	// DataunstableEventFieldLABELNAMEEVENTFIELD captures enum value "LABEL_NAME_EVENT_FIELD"
	DataunstableEventFieldLABELNAMEEVENTFIELD DataunstableEventField = "LABEL_NAME_EVENT_FIELD"

	// DataunstableEventFieldLABELVALUEEVENTFIELD captures enum value "LABEL_VALUE_EVENT_FIELD"
	DataunstableEventFieldLABELVALUEEVENTFIELD DataunstableEventField = "LABEL_VALUE_EVENT_FIELD"

	// DataunstableEventFieldLENSSERVICEEVENTFIELD captures enum value "LENS_SERVICE_EVENT_FIELD"
	DataunstableEventFieldLENSSERVICEEVENTFIELD DataunstableEventField = "LENS_SERVICE_EVENT_FIELD"
)

// for schema
var dataunstableEventFieldEnum []interface{}

func init() {
	var res []DataunstableEventField
	if err := json.Unmarshal([]byte(`["CATEGORY_EVENT_FIELD","TYPE_EVENT_FIELD","SOURCE_EVENT_FIELD","LABEL_NAME_EVENT_FIELD","LABEL_VALUE_EVENT_FIELD","LENS_SERVICE_EVENT_FIELD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataunstableEventFieldEnum = append(dataunstableEventFieldEnum, v)
	}
}

func (m DataunstableEventField) validateDataunstableEventFieldEnum(path, location string, value DataunstableEventField) error {
	if err := validate.EnumCase(path, location, value, dataunstableEventFieldEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dataunstable event field
func (m DataunstableEventField) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDataunstableEventFieldEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dataunstable event field based on context it is used
func (m DataunstableEventField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
