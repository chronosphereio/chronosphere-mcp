// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataunstableGetLogClusterUsageResponse dataunstable get log cluster usage response
//
// swagger:model dataunstableGetLogClusterUsageResponse
type DataunstableGetLogClusterUsageResponse struct {

	// cluster id
	ClusterID string `json:"cluster_id,omitempty"`

	// executions
	Executions *DataunstableGetLogClusterUsageResponseExecutions `json:"executions,omitempty"`

	// key
	Key string `json:"key,omitempty"`

	// pattern
	Pattern string `json:"pattern,omitempty"`

	// recommendation
	Recommendation *GetLogClusterUsageResponseRecommendation `json:"recommendation,omitempty"`

	// references
	References *GetLogClusterUsageResponseReferences `json:"references,omitempty"`

	// utility score
	UtilityScore float32 `json:"utility_score,omitempty"`

	// utility score previous
	UtilityScorePrevious float32 `json:"utility_score_previous,omitempty"`

	// volume bytes
	VolumeBytes string `json:"volume_bytes,omitempty"`

	// volume bytes 24h
	VolumeBytes24h string `json:"volume_bytes_24h,omitempty"`

	// volume bytes 24h previous
	VolumeBytes24hPrevious string `json:"volume_bytes_24h_previous,omitempty"`

	// volume bytes buckets
	VolumeBytesBuckets []*GetLogClusterUsageResponseUsageBucket `json:"volume_bytes_buckets"`

	// volume bytes previous
	VolumeBytesPrevious string `json:"volume_bytes_previous,omitempty"`
}

// Validate validates this dataunstable get log cluster usage response
func (m *DataunstableGetLogClusterUsageResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeBytesBuckets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataunstableGetLogClusterUsageResponse) validateExecutions(formats strfmt.Registry) error {
	if swag.IsZero(m.Executions) { // not required
		return nil
	}

	if m.Executions != nil {
		if err := m.Executions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executions")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetLogClusterUsageResponse) validateRecommendation(formats strfmt.Registry) error {
	if swag.IsZero(m.Recommendation) { // not required
		return nil
	}

	if m.Recommendation != nil {
		if err := m.Recommendation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommendation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommendation")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetLogClusterUsageResponse) validateReferences(formats strfmt.Registry) error {
	if swag.IsZero(m.References) { // not required
		return nil
	}

	if m.References != nil {
		if err := m.References.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("references")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("references")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetLogClusterUsageResponse) validateVolumeBytesBuckets(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeBytesBuckets) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeBytesBuckets); i++ {
		if swag.IsZero(m.VolumeBytesBuckets[i]) { // not required
			continue
		}

		if m.VolumeBytesBuckets[i] != nil {
			if err := m.VolumeBytesBuckets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volume_bytes_buckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volume_bytes_buckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this dataunstable get log cluster usage response based on the context it is used
func (m *DataunstableGetLogClusterUsageResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecutions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecommendation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeBytesBuckets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataunstableGetLogClusterUsageResponse) contextValidateExecutions(ctx context.Context, formats strfmt.Registry) error {

	if m.Executions != nil {

		if swag.IsZero(m.Executions) { // not required
			return nil
		}

		if err := m.Executions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executions")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetLogClusterUsageResponse) contextValidateRecommendation(ctx context.Context, formats strfmt.Registry) error {

	if m.Recommendation != nil {

		if swag.IsZero(m.Recommendation) { // not required
			return nil
		}

		if err := m.Recommendation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommendation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommendation")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetLogClusterUsageResponse) contextValidateReferences(ctx context.Context, formats strfmt.Registry) error {

	if m.References != nil {

		if swag.IsZero(m.References) { // not required
			return nil
		}

		if err := m.References.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("references")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("references")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetLogClusterUsageResponse) contextValidateVolumeBytesBuckets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeBytesBuckets); i++ {

		if m.VolumeBytesBuckets[i] != nil {

			if swag.IsZero(m.VolumeBytesBuckets[i]) { // not required
				return nil
			}

			if err := m.VolumeBytesBuckets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volume_bytes_buckets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volume_bytes_buckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataunstableGetLogClusterUsageResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataunstableGetLogClusterUsageResponse) UnmarshalBinary(b []byte) error {
	var res DataunstableGetLogClusterUsageResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
