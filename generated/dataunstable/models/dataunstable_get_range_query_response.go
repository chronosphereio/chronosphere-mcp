// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DataunstableGetRangeQueryResponse dataunstable get range query response
//
// swagger:model dataunstableGetRangeQueryResponse
type DataunstableGetRangeQueryResponse struct {

	// grid data
	GridData *DataunstableLogQueryGridData `json:"grid_data,omitempty"`

	// metadata
	Metadata *GetRangeQueryResponseRangeQueryMetadata `json:"metadata,omitempty"`

	// time series data
	TimeSeriesData *DataunstableLogQueryTimeSeriesData `json:"time_series_data,omitempty"`
}

// Validate validates this dataunstable get range query response
func (m *DataunstableGetRangeQueryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGridData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeSeriesData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataunstableGetRangeQueryResponse) validateGridData(formats strfmt.Registry) error {
	if swag.IsZero(m.GridData) { // not required
		return nil
	}

	if m.GridData != nil {
		if err := m.GridData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grid_data")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetRangeQueryResponse) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {
		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetRangeQueryResponse) validateTimeSeriesData(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeSeriesData) { // not required
		return nil
	}

	if m.TimeSeriesData != nil {
		if err := m.TimeSeriesData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_series_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time_series_data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this dataunstable get range query response based on the context it is used
func (m *DataunstableGetRangeQueryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGridData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeSeriesData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DataunstableGetRangeQueryResponse) contextValidateGridData(ctx context.Context, formats strfmt.Registry) error {

	if m.GridData != nil {

		if swag.IsZero(m.GridData) { // not required
			return nil
		}

		if err := m.GridData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grid_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grid_data")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetRangeQueryResponse) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.Metadata != nil {

		if swag.IsZero(m.Metadata) { // not required
			return nil
		}

		if err := m.Metadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metadata")
			}
			return err
		}
	}

	return nil
}

func (m *DataunstableGetRangeQueryResponse) contextValidateTimeSeriesData(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeSeriesData != nil {

		if swag.IsZero(m.TimeSeriesData) { // not required
			return nil
		}

		if err := m.TimeSeriesData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("time_series_data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("time_series_data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DataunstableGetRangeQueryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataunstableGetRangeQueryResponse) UnmarshalBinary(b []byte) error {
	var res DataunstableGetRangeQueryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
