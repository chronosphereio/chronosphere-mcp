// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GetLogClusterExecutionsRequestExecutionType get log cluster executions request execution type
//
// swagger:model GetLogClusterExecutionsRequestExecutionType
type GetLogClusterExecutionsRequestExecutionType string

func NewGetLogClusterExecutionsRequestExecutionType(value GetLogClusterExecutionsRequestExecutionType) *GetLogClusterExecutionsRequestExecutionType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GetLogClusterExecutionsRequestExecutionType.
func (m GetLogClusterExecutionsRequestExecutionType) Pointer() *GetLogClusterExecutionsRequestExecutionType {
	return &m
}

const (

	// GetLogClusterExecutionsRequestExecutionTypeLOGEXPLORER captures enum value "LOG_EXPLORER"
	GetLogClusterExecutionsRequestExecutionTypeLOGEXPLORER GetLogClusterExecutionsRequestExecutionType = "LOG_EXPLORER"

	// GetLogClusterExecutionsRequestExecutionTypeDASHBOARD captures enum value "DASHBOARD"
	GetLogClusterExecutionsRequestExecutionTypeDASHBOARD GetLogClusterExecutionsRequestExecutionType = "DASHBOARD"
)

// for schema
var getLogClusterExecutionsRequestExecutionTypeEnum []interface{}

func init() {
	var res []GetLogClusterExecutionsRequestExecutionType
	if err := json.Unmarshal([]byte(`["LOG_EXPLORER","DASHBOARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getLogClusterExecutionsRequestExecutionTypeEnum = append(getLogClusterExecutionsRequestExecutionTypeEnum, v)
	}
}

func (m GetLogClusterExecutionsRequestExecutionType) validateGetLogClusterExecutionsRequestExecutionTypeEnum(path, location string, value GetLogClusterExecutionsRequestExecutionType) error {
	if err := validate.EnumCase(path, location, value, getLogClusterExecutionsRequestExecutionTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this get log cluster executions request execution type
func (m GetLogClusterExecutionsRequestExecutionType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGetLogClusterExecutionsRequestExecutionTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this get log cluster executions request execution type based on context it is used
func (m GetLogClusterExecutionsRequestExecutionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
