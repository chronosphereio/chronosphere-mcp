// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ListLogsRequestSortOrder list logs request sort order
//
// swagger:model ListLogsRequestSortOrder
type ListLogsRequestSortOrder string

func NewListLogsRequestSortOrder(value ListLogsRequestSortOrder) *ListLogsRequestSortOrder {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ListLogsRequestSortOrder.
func (m ListLogsRequestSortOrder) Pointer() *ListLogsRequestSortOrder {
	return &m
}

const (

	// ListLogsRequestSortOrderASC captures enum value "ASC"
	ListLogsRequestSortOrderASC ListLogsRequestSortOrder = "ASC"

	// ListLogsRequestSortOrderDESC captures enum value "DESC"
	ListLogsRequestSortOrderDESC ListLogsRequestSortOrder = "DESC"
)

// for schema
var listLogsRequestSortOrderEnum []interface{}

func init() {
	var res []ListLogsRequestSortOrder
	if err := json.Unmarshal([]byte(`["ASC","DESC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listLogsRequestSortOrderEnum = append(listLogsRequestSortOrderEnum, v)
	}
}

func (m ListLogsRequestSortOrder) validateListLogsRequestSortOrderEnum(path, location string, value ListLogsRequestSortOrder) error {
	if err := validate.EnumCase(path, location, value, listLogsRequestSortOrderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this list logs request sort order
func (m ListLogsRequestSortOrder) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateListLogsRequestSortOrderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this list logs request sort order based on context it is used
func (m ListLogsRequestSortOrder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
