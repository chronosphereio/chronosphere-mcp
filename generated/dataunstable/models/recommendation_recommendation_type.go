// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RecommendationRecommendationType recommendation recommendation type
//
// swagger:model RecommendationRecommendationType
type RecommendationRecommendationType string

func NewRecommendationRecommendationType(value RecommendationRecommendationType) *RecommendationRecommendationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RecommendationRecommendationType.
func (m RecommendationRecommendationType) Pointer() *RecommendationRecommendationType {
	return &m
}

const (

	// RecommendationRecommendationTypeDROPLOG captures enum value "DROP_LOG"
	RecommendationRecommendationTypeDROPLOG RecommendationRecommendationType = "DROP_LOG"

	// RecommendationRecommendationTypeADDMETRIC captures enum value "ADD_METRIC"
	RecommendationRecommendationTypeADDMETRIC RecommendationRecommendationType = "ADD_METRIC"

	// RecommendationRecommendationTypeADDMETRICANDDROP captures enum value "ADD_METRIC_AND_DROP"
	RecommendationRecommendationTypeADDMETRICANDDROP RecommendationRecommendationType = "ADD_METRIC_AND_DROP"
)

// for schema
var recommendationRecommendationTypeEnum []interface{}

func init() {
	var res []RecommendationRecommendationType
	if err := json.Unmarshal([]byte(`["DROP_LOG","ADD_METRIC","ADD_METRIC_AND_DROP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recommendationRecommendationTypeEnum = append(recommendationRecommendationTypeEnum, v)
	}
}

func (m RecommendationRecommendationType) validateRecommendationRecommendationTypeEnum(path, location string, value RecommendationRecommendationType) error {
	if err := validate.EnumCase(path, location, value, recommendationRecommendationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this recommendation recommendation type
func (m RecommendationRecommendationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecommendationRecommendationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this recommendation recommendation type based on context it is used
func (m RecommendationRecommendationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
