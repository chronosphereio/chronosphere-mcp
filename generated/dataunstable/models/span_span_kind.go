// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SpanSpanKind SpanKind is the type of span. Can be used to specify additional relationships between spans
// in addition to a parent/child relationship.
//
//   - SPAN_KIND_INTERNAL: Indicates that the span represents an internal operation within an application,
//
// as opposed to an operation happening at the boundaries. Default value.
//   - SPAN_KIND_SERVER: Indicates that the span covers server-side handling of an RPC or other
//
// remote network request.
//   - SPAN_KIND_CLIENT: Indicates that the span describes a request to some remote service.
//   - SPAN_KIND_PRODUCER: Indicates that the span describes a producer sending a message to a broker.
//
// Unlike CLIENT and SERVER, there is often no direct critical path latency relationship
// between producer and consumer spans. A PRODUCER span ends when the message was accepted
// by the broker while the logical processing of the message might span a much longer time.
//   - SPAN_KIND_CONSUMER: Indicates that the span describes consumer receiving a message from a broker.
//
// Like the PRODUCER kind, there is often no direct critical path latency relationship
// between producer and consumer spans.
//
// swagger:model SpanSpanKind
type SpanSpanKind string

func NewSpanSpanKind(value SpanSpanKind) *SpanSpanKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SpanSpanKind.
func (m SpanSpanKind) Pointer() *SpanSpanKind {
	return &m
}

const (

	// SpanSpanKindSPANKINDINTERNAL captures enum value "SPAN_KIND_INTERNAL"
	SpanSpanKindSPANKINDINTERNAL SpanSpanKind = "SPAN_KIND_INTERNAL"

	// SpanSpanKindSPANKINDSERVER captures enum value "SPAN_KIND_SERVER"
	SpanSpanKindSPANKINDSERVER SpanSpanKind = "SPAN_KIND_SERVER"

	// SpanSpanKindSPANKINDCLIENT captures enum value "SPAN_KIND_CLIENT"
	SpanSpanKindSPANKINDCLIENT SpanSpanKind = "SPAN_KIND_CLIENT"

	// SpanSpanKindSPANKINDPRODUCER captures enum value "SPAN_KIND_PRODUCER"
	SpanSpanKindSPANKINDPRODUCER SpanSpanKind = "SPAN_KIND_PRODUCER"

	// SpanSpanKindSPANKINDCONSUMER captures enum value "SPAN_KIND_CONSUMER"
	SpanSpanKindSPANKINDCONSUMER SpanSpanKind = "SPAN_KIND_CONSUMER"
)

// for schema
var spanSpanKindEnum []interface{}

func init() {
	var res []SpanSpanKind
	if err := json.Unmarshal([]byte(`["SPAN_KIND_INTERNAL","SPAN_KIND_SERVER","SPAN_KIND_CLIENT","SPAN_KIND_PRODUCER","SPAN_KIND_CONSUMER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		spanSpanKindEnum = append(spanSpanKindEnum, v)
	}
}

func (m SpanSpanKind) validateSpanSpanKindEnum(path, location string, value SpanSpanKind) error {
	if err := validate.EnumCase(path, location, value, spanSpanKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this span span kind
func (m SpanSpanKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSpanSpanKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this span span kind based on context it is used
func (m SpanSpanKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
