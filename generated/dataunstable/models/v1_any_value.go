// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1AnyValue AnyValue is used to represent any type of attribute value. AnyValue may contain a
// primitive value such as a string or integer or it may contain an arbitrary nested
// object containing arrays, key-value lists and primitives.
//
// swagger:model v1AnyValue
type V1AnyValue struct {

	// array value
	ArrayValue *V1ArrayValue `json:"array_value,omitempty"`

	// bool value
	BoolValue bool `json:"bool_value,omitempty"`

	// bytes value
	// Format: byte
	BytesValue strfmt.Base64 `json:"bytes_value,omitempty"`

	// double value
	DoubleValue float64 `json:"double_value,omitempty"`

	// int value
	IntValue string `json:"int_value,omitempty"`

	// kvlist value
	KvlistValue *V1KeyValueList `json:"kvlist_value,omitempty"`

	// string value
	StringValue string `json:"string_value,omitempty"`
}

// Validate validates this v1 any value
func (m *V1AnyValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrayValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvlistValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AnyValue) validateArrayValue(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrayValue) { // not required
		return nil
	}

	if m.ArrayValue != nil {
		if err := m.ArrayValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("array_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("array_value")
			}
			return err
		}
	}

	return nil
}

func (m *V1AnyValue) validateKvlistValue(formats strfmt.Registry) error {
	if swag.IsZero(m.KvlistValue) { // not required
		return nil
	}

	if m.KvlistValue != nil {
		if err := m.KvlistValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvlist_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvlist_value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v1 any value based on the context it is used
func (m *V1AnyValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArrayValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKvlistValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AnyValue) contextValidateArrayValue(ctx context.Context, formats strfmt.Registry) error {

	if m.ArrayValue != nil {

		if swag.IsZero(m.ArrayValue) { // not required
			return nil
		}

		if err := m.ArrayValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("array_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("array_value")
			}
			return err
		}
	}

	return nil
}

func (m *V1AnyValue) contextValidateKvlistValue(ctx context.Context, formats strfmt.Registry) error {

	if m.KvlistValue != nil {

		if swag.IsZero(m.KvlistValue) { // not required
			return nil
		}

		if err := m.KvlistValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvlist_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvlist_value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1AnyValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AnyValue) UnmarshalBinary(b []byte) error {
	var res V1AnyValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
