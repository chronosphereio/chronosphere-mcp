// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1EntityRef A reference to an Entity.
// Entity represents an object of interest associated with produced telemetry: e.g spans, metrics, profiles, or logs.
//
// Status: [Development]
//
// swagger:model v1EntityRef
type V1EntityRef struct {

	// Descriptive (non-identifying) attribute keys of the entity.
	// MAY change over the lifetime of the entity. MAY be empty.
	// These attribute keys are not part of entity's identity.
	// These keys MUST exist in the containing {message}.attributes.
	DescriptionKeys []string `json:"description_keys"`

	// Attribute Keys that identify the entity.
	// MUST not change during the lifetime of the entity. The Id must contain at least one attribute.
	// These keys MUST exist in the containing {message}.attributes.
	IDKeys []string `json:"id_keys"`

	// The Schema URL, if known. This is the identifier of the Schema that the entity data
	// is recorded in. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	//
	// This schema_url applies to the data in this message and to the Resource attributes
	// referenced by id_keys and description_keys.
	// TODO: discuss if we are happy with this somewhat complicated definition of what
	// the schema_url applies to.
	//
	// This field obsoletes the schema_url field in ResourceMetrics/ResourceSpans/ResourceLogs.
	SchemaURL string `json:"schema_url,omitempty"`

	// Defines the type of the entity. MUST not change during the lifetime of the entity.
	// For example: "service" or "host". This field is required and MUST not be empty
	// for valid entities.
	Type string `json:"type,omitempty"`
}

// Validate validates this v1 entity ref
func (m *V1EntityRef) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this v1 entity ref based on context it is used
func (m *V1EntityRef) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1EntityRef) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EntityRef) UnmarshalBinary(b []byte) error {
	var res V1EntityRef
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
