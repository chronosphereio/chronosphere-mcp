{
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "AnalyzeAlertsRequestAlertFilter": {
      "type": "object",
      "properties": {
        "monitor_slug": {
          "$ref": "#/definitions/AnalyzeAlertsRequestStringMatcher",
          "description": "Optional: limit considered alerts to those from a specific monitor."
        },
        "signals": {
          "$ref": "#/definitions/AnalyzeAlertsRequestLabelsMatcher",
          "description": "Optional: limit considered alerts to those having the given signals."
        },
        "monitor_labels": {
          "$ref": "#/definitions/AnalyzeAlertsRequestLabelsMatcher",
          "description": "Optional: limit considered alerts to those having the given monitor labels."
        },
        "notification_policy_slug": {
          "$ref": "#/definitions/AnalyzeAlertsRequestStringMatcher",
          "description": "Optional: limit considered alerts to those from a specific notification policy."
        },
        "is_muted": {
          "type": "boolean",
          "title": "Filter alerts by mute status"
        }
      },
      "description": "AlertFilter contains semantic filter options for alert analysis queries (list, aggregate, etc).\nIMPORTANT: ALL fields in this message now use AND semantics when combined.\nTo achieve OR semantics between criteria, use multiple AlertFilter instances\nwith alert_filters_combine_mode = OR in the request."
    },
    "AnalyzeAlertsRequestAlertFiltersCombineMode": {
      "type": "string",
      "enum": [
        "ALERT_FILTERS_OR"
      ],
      "description": "- ALERT_FILTERS_OR: At least one filter must match",
      "title": "AlertFiltersCombineMode specifies how multiple AlertFilters are combined"
    },
    "AnalyzeAlertsRequestLabelMatcher": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "The label key to match against"
        },
        "value": {
          "$ref": "#/definitions/AnalyzeAlertsRequestStringMatcher",
          "title": "String matcher to apply to the label value"
        }
      },
      "description": "LabelMatcher provides label matching with advanced string operations.\nCombines a specific label key with flexible value matching."
    },
    "AnalyzeAlertsRequestLabelsMatcher": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AnalyzeAlertsRequestLabelMatcher"
          },
          "title": "List of label matchers to apply"
        },
        "min_matches": {
          "type": "integer",
          "format": "int32",
          "title": "Minimum number of label matches required for this matcher to be satisfied.\nIf not set, defaults to requiring at least one match when labels are specified."
        }
      },
      "description": "LabelsMatcher provides label matching with general per-label matching operations."
    },
    "AnalyzeAlertsRequestStringMatcher": {
      "type": "object",
      "properties": {
        "operation": {
          "$ref": "#/definitions/AnalyzeAlertsRequestStringMatcherOperation",
          "title": "The type of matching operation to perform"
        },
        "single_value": {
          "type": "string",
          "title": "Single value for operations that work with one value (EQUAL, REGEX_EQUAL, CONTAINS, etc.)"
        },
        "list_values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of values for operations that work with multiple values (ANY_OF, NONE_OF)"
        }
      },
      "description": "StringMatcher provides advanced string matching operations.\nUsed throughout the API for flexible filtering of string fields."
    },
    "AnalyzeAlertsRequestStringMatcherOperation": {
      "type": "string",
      "enum": [
        "EQUAL",
        "REGEX_EQUAL",
        "CONTAINS",
        "NOT_EQUAL",
        "NOT_REGEX_EQUAL",
        "NOT_CONTAINS",
        "ANY_OF",
        "NONE_OF"
      ],
      "description": "StringMatcherOperation defines the type of string matching operation.\n\n - EQUAL: Exact string equality\n - REGEX_EQUAL: Regular expression matching\n - CONTAINS: String contains (substring match)\n - NOT_EQUAL: Not equal to string\n - NOT_REGEX_EQUAL: Does not match regular expression\n - NOT_CONTAINS: Does not contain (no substring match)\n - ANY_OF: Matches any of the provided values\n - NONE_OF: Matches none of the provided values"
    },
    "AnalyzeAlertsRequestTimeFilter": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "Start time for the filter (inclusive)"
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "title": "End time for the filter (exclusive)"
        },
        "duration_seconds": {
          "type": "integer",
          "format": "int32",
          "title": "Alternative to end_time: specify duration in seconds from start_time"
        }
      },
      "description": "TimeFilter provides a time range for filtering alert events."
    },
    "AnalyzeAlertsResponseAlert": {
      "type": "object",
      "properties": {
        "alert_id": {
          "type": "string",
          "title": "Unique identifier for this alert instance"
        },
        "monitor_slug": {
          "type": "string",
          "title": "Slug of the monitor that generated this alert"
        },
        "monitor_name": {
          "type": "string",
          "title": "Human-readable name of the monitor"
        },
        "signal": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/dataunstableAnalyzeAlertsResponseLabel"
          },
          "description": "If configured, key-value pairs (labels, from telemetry) that semantically characterize the alert further."
        },
        "monitor_labels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/dataunstableAnalyzeAlertsResponseLabel"
          },
          "title": "Labels attached to the monitor that generated this alert"
        },
        "is_muted": {
          "type": "boolean",
          "title": "Whether this alert is currently muted"
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "title": "When this alert first triggered"
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "title": "When this alert resolved (if it has resolved)"
        },
        "notification_policy_slug": {
          "type": "string",
          "title": "Slug of the notification policy handling this alert"
        },
        "notification_policy_name": {
          "type": "string",
          "title": "Human-readable name of the notification policy"
        },
        "ownership_context": {
          "$ref": "#/definitions/AnalyzeAlertsResponseOwnershipContext",
          "title": "Ownership context for the monitor"
        },
        "severity_history": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AnalyzeAlertsResponseSeverityChangeHistoryEntry"
          },
          "title": "Historical record of severity changes throughout the alert lifecycle"
        },
        "mute_history": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AnalyzeAlertsResponseMuteActionHistoryEntry"
          },
          "title": "Historical record of mute/unmute actions"
        },
        "notifier_history": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AnalyzeAlertsResponseNotifierHistoryEntry"
          },
          "title": "Historical record of notification attempts"
        },
        "monitor_label_match_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of monitor labels that matched the filter criteria (if monitor_labels filter was provided)"
        },
        "signal_match_count": {
          "type": "integer",
          "format": "int32",
          "title": "Number of signals that matched the filter criteria (if signals filter was provided)"
        },
        "slo_metadata": {
          "$ref": "#/definitions/AnalyzeAlertsResponseSloMetadata",
          "title": "SLO metadata if this alert is from an SLO-generated monitor"
        },
        "signals_hash": {
          "type": "string",
          "format": "int64",
          "title": "Hash of signals for grouping alerts with identical signal combinations."
        },
        "tenant_id": {
          "type": "string",
          "title": "Tenant identifier for the alert"
        }
      },
      "description": "Alert represents a logical alert with its lifecycle and history.\nThis type is specific to analytical access patterns in this package.\nContains complete alert metadata, timing, and historical events."
    },
    "AnalyzeAlertsResponseMuteActionHistoryEntry": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "title": "The action taken: \"MUTED\" or \"UNMUTED\""
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "When this action occurred"
        },
        "user": {
          "type": "string",
          "title": "User who performed the action"
        }
      },
      "description": "MuteActionHistoryEntry represents a mute/unmute action during the alert lifecycle.\nTracks when an alert was manually muted or unmuted."
    },
    "AnalyzeAlertsResponseNotifierHistoryEntry": {
      "type": "object",
      "properties": {
        "severity": {
          "type": "string",
          "title": "Severity level when this notification was sent"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "When this notification was sent"
        },
        "notifier_slug": {
          "type": "string",
          "title": "Slug of the notifier that sent this notification"
        }
      },
      "description": "NotifierHistoryEntry represents a notifier send attempt during the alert lifecycle.\nTracks all notification attempts made for this alert."
    },
    "AnalyzeAlertsResponseOwnershipContext": {
      "type": "object",
      "properties": {
        "entity_group_id": {
          "type": "string",
          "title": "Entity group that owns the monitor"
        },
        "collection_id": {
          "type": "string",
          "title": "Collection that contains the monitor"
        }
      },
      "description": "OwnershipContext contains ownership information for the monitor.\nProvides hierarchical ownership context from entity groups and collections."
    },
    "AnalyzeAlertsResponseSeverityChangeHistoryEntry": {
      "type": "object",
      "properties": {
        "severity": {
          "type": "string",
          "title": "The new severity level (e.g., \"critical\", \"warning\")"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "When this severity change occurred"
        }
      },
      "description": "SeverityChangeHistoryEntry represents a severity change during the alert lifecycle.\nTracks when an alert's severity level changed over time."
    },
    "AnalyzeAlertsResponseSloMetadata": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string",
          "title": "SLO slug identifier"
        },
        "name": {
          "type": "string",
          "title": "Human-readable SLO name"
        }
      },
      "description": "SloMetadata contains metadata about an SLO-generated monitor.\nOnly present when the alert originates from an SLO monitor."
    },
    "dataunstableAnalyzeAlertsRequest": {
      "type": "object",
      "properties": {
        "time_filter": {
          "$ref": "#/definitions/AnalyzeAlertsRequestTimeFilter",
          "title": "Time range filter (required)"
        },
        "alert_filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AnalyzeAlertsRequestAlertFilter"
          },
          "title": "Semantic filters to apply to alerts"
        },
        "alert_filters_combine_mode": {
          "$ref": "#/definitions/AnalyzeAlertsRequestAlertFiltersCombineMode",
          "title": "How to combine multiple alert filters (AND vs OR)"
        }
      },
      "description": "AnalyzeAlertsRequest is the request for the AnalyzeAlerts API.\nRetrieves alerts (aggregated by alert_id) within a given time range that match the provided filters."
    },
    "dataunstableAnalyzeAlertsResponse": {
      "type": "object",
      "properties": {
        "alerts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AnalyzeAlertsResponseAlert"
          },
          "title": "List of alerts matching the filter criteria"
        }
      },
      "description": "AnalyzeAlertsResponse is the response for the AnalyzeAlerts API.\nReturns a list of alerts matching the request criteria."
    },
    "dataunstableAnalyzeAlertsResponseLabel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name of the label (e.g., \"team\", \"environment\")"
        },
        "value": {
          "type": "string",
          "title": "The value of the label (e.g., \"platform\", \"production\")"
        }
      },
      "description": "Label represents a key-value pair associated with a monitor.\nMonitor labels provide metadata about the monitor that generated the alert."
    },
    "EventBucketGroup": {
      "description": "A single group of events within a bucket.",
      "properties": {
        "name": {
          "description": "The name of this group within the bucket. Set to the value of the group_by field.\nUnset if group_by is unset.",
          "type": "string"
        },
        "count": {
          "description": "The count of events in this group within the bucket.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutionSummaryDashboard": {
      "properties": {
        "slug": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetLogClusterExecutionsRequestExecutionType": {
      "enum": [
        "LOG_EXPLORER",
        "DASHBOARD"
      ],
      "type": "string"
    },
    "GetLogClusterExecutionsResponseExecutionSummary": {
      "properties": {
        "count": {
          "format": "uint64",
          "type": "string"
        },
        "query": {
          "description": "either `query` or `dashboard` will be set, depending on the first level of grouping",
          "type": "string"
        },
        "dashboard": {
          "$ref": "#/definitions/ExecutionSummaryDashboard"
        },
        "executions": {
          "items": {
            "$ref": "#/definitions/GetLogClusterExecutionsResponseExecutionSummaryExecutions"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "GetLogClusterExecutionsResponseExecutionSummaryExecutions": {
      "properties": {
        "count": {
          "format": "uint64",
          "type": "string"
        },
        "user": {
          "description": "`dashboard` or `user` will not be set if we're not grouping by it",
          "type": "string"
        },
        "dashboard": {
          "$ref": "#/definitions/ExecutionSummaryDashboard"
        }
      },
      "type": "object"
    },
    "GetLogClusterUsageResponseRecommendation": {
      "properties": {
        "type": {
          "$ref": "#/definitions/RecommendationRecommendationType"
        },
        "header_text": {
          "type": "string"
        },
        "body_text": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetLogClusterUsageResponseReferences": {
      "properties": {
        "dashboards": {
          "format": "uint64",
          "type": "string"
        },
        "monitors": {
          "format": "uint64",
          "type": "string"
        },
        "saved_searches": {
          "format": "uint64",
          "type": "string"
        }
      },
      "title": "not used initially",
      "type": "object"
    },
    "GetLogClusterUsageResponseUsageBucket": {
      "properties": {
        "after": {
          "format": "date-time",
          "type": "string"
        },
        "before": {
          "format": "date-time",
          "type": "string"
        },
        "value": {
          "format": "uint64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetLoggingUsageRequestResponseOrderType": {
      "enum": [
        "UTILITY_ASC",
        "UTILITY_DESC",
        "VOLUME_ASC",
        "VOLUME_DESC",
        "VOLUME_24H_ASC",
        "VOLUME_24H_DESC"
      ],
      "type": "string"
    },
    "GetLoggingUsageResponseMetadata": {
      "properties": {
        "total_patterns": {
          "format": "uint64",
          "type": "string"
        },
        "total_logs": {
          "format": "uint64",
          "type": "string"
        },
        "last_updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "total_bytes": {
          "format": "uint64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetRangeQueryResponseRangeQueryMetadata": {
      "properties": {
        "limit_enforced": {
          "description": "This field indicates whether the result is truncated by the limit requested.",
          "type": "boolean"
        },
        "page": {
          "$ref": "#/definitions/dataunstableRangeQueryPageResult"
        }
      },
      "type": "object"
    },
    "ListEventFieldValuesRequestScope": {
      "description": "The scope to apply to the query.",
      "properties": {
        "categories": {
          "description": "The list of categories to scope event field values by.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "types": {
          "description": "The list of types to scope event field values by.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sources": {
          "description": "The list of sources to scope event field values by.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ListLogsRequestSortOrder": {
      "enum": [
        "ASC",
        "DESC"
      ],
      "type": "string"
    },
    "ListTracesRequestQueryType": {
      "enum": [
        "TRACE_IDS",
        "SERVICE_OPERATION"
      ],
      "type": "string"
    },
    "ListTracesRequestTagFilter": {
      "properties": {
        "key": {
          "description": "The key (or name) of the span tag that is inspected by this filter.",
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/TagFilterStringFilter"
        },
        "numeric_value": {
          "$ref": "#/definitions/TagFilterNumericFilter"
        }
      },
      "type": "object"
    },
    "LogQueryTimeSeriesDataLogQueryTimeSeries": {
      "properties": {
        "group_by_dimension_values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "buckets": {
          "items": {
            "$ref": "#/definitions/LogQueryTimeSeriesLogQueryTimeSeriesBucket"
          },
          "type": "array"
        },
        "aggregation_name": {
          "description": "aggregation_name is by default the name of the aggregation used to calculate\nthe values.\nIn the future we may support aliasing in query grammar.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "LogQueryTimeSeriesLogQueryTimeSeriesBucket": {
      "properties": {
        "start_time": {
          "description": "The start time of the time range this bucket covers.",
          "format": "date-time",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of the time range this bucket covers.",
          "format": "date-time",
          "type": "string"
        },
        "float_value": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "NumericFilterComparisonType": {
      "enum": [
        "EQUAL",
        "NOT_EQUAL",
        "GREATER_THAN",
        "GREATER_THAN_OR_EQUAL",
        "LESS_THAN",
        "LESS_THAN_OR_EQUAL"
      ],
      "type": "string"
    },
    "RecommendationRecommendationType": {
      "enum": [
        "DROP_LOG",
        "ADD_METRIC",
        "ADD_METRIC_AND_DROP"
      ],
      "type": "string"
    },
    "SpanLink": {
      "description": "A pointer from the current span to another span in the same trace or in a\ndifferent trace. For example, this can be used in batching operations,\nwhere a single batch handler processes multiple requests from different\ntraces or when the handler receives a request from a different project.",
      "properties": {
        "trace_id": {
          "description": "A unique identifier of a trace that this linked span is part of. The ID is a\n16-byte array.",
          "format": "byte",
          "type": "string"
        },
        "span_id": {
          "description": "A unique identifier for the linked span. The ID is an 8-byte array.",
          "format": "byte",
          "type": "string"
        },
        "trace_state": {
          "description": "The trace_state associated with the link.",
          "type": "string"
        },
        "attributes": {
          "description": "attributes is a collection of attribute key/value pairs on the link.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key).",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "type": "array"
        },
        "dropped_attributes_count": {
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0,\nthen no attributes were dropped.",
          "format": "int64",
          "type": "integer"
        },
        "flags": {
          "description": "Flags, a bit field.\n\nBits 0-7 (8 least significant bits) are the trace flags as defined in W3C Trace\nContext specification. To read the 8-bit W3C trace flag, use\n`flags \u0026 SPAN_FLAGS_TRACE_FLAGS_MASK`.\n\nSee https://www.w3.org/TR/trace-context-2/#trace-flags for the flag definitions.\n\nBits 8 and 9 represent the 3 states of whether the link is remote.\nThe states are (unknown, is not remote, is remote).\nTo read whether the value is known, use `(flags \u0026 SPAN_FLAGS_CONTEXT_HAS_IS_REMOTE_MASK) != 0`.\nTo read whether the link is remote, use `(flags \u0026 SPAN_FLAGS_CONTEXT_IS_REMOTE_MASK) != 0`.\n\nReaders MUST NOT assume that bits 10-31 (22 most significant bits) will be zero.\nWhen creating new spans, bits 10-31 (most-significant 22-bits) MUST be zero.\n\n[Optional].",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SpanSpanKind": {
      "description": "SpanKind is the type of span. Can be used to specify additional relationships between spans\nin addition to a parent/child relationship.\n\n - SPAN_KIND_INTERNAL: Indicates that the span represents an internal operation within an application,\nas opposed to an operation happening at the boundaries. Default value.\n - SPAN_KIND_SERVER: Indicates that the span covers server-side handling of an RPC or other\nremote network request.\n - SPAN_KIND_CLIENT: Indicates that the span describes a request to some remote service.\n - SPAN_KIND_PRODUCER: Indicates that the span describes a producer sending a message to a broker.\nUnlike CLIENT and SERVER, there is often no direct critical path latency relationship\nbetween producer and consumer spans. A PRODUCER span ends when the message was accepted\nby the broker while the logical processing of the message might span a much longer time.\n - SPAN_KIND_CONSUMER: Indicates that the span describes consumer receiving a message from a broker.\nLike the PRODUCER kind, there is often no direct critical path latency relationship\nbetween producer and consumer spans.",
      "enum": [
        "SPAN_KIND_INTERNAL",
        "SPAN_KIND_SERVER",
        "SPAN_KIND_CLIENT",
        "SPAN_KIND_PRODUCER",
        "SPAN_KIND_CONSUMER"
      ],
      "type": "string"
    },
    "StatusStatusCode": {
      "description": "- STATUS_CODE_OK: The Span has been validated by an Application developer or Operator to \nhave completed successfully.\n - STATUS_CODE_ERROR: The Span contains an error.",
      "enum": [
        "STATUS_CODE_OK",
        "STATUS_CODE_ERROR"
      ],
      "title": "For the semantics of status codes see\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status",
      "type": "string"
    },
    "StringFilterStringFilterMatchType": {
      "enum": [
        "EXACT",
        "REGEX",
        "EXACT_NEGATION",
        "REGEX_NEGATION",
        "IN",
        "NOT_IN"
      ],
      "type": "string"
    },
    "TagFilterNumericFilter": {
      "properties": {
        "comparison": {
          "$ref": "#/definitions/NumericFilterComparisonType"
        },
        "value": {
          "description": "The filter value used in comparison against match candidates.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "TagFilterStringFilter": {
      "properties": {
        "match": {
          "$ref": "#/definitions/StringFilterStringFilterMatchType"
        },
        "value": {
          "description": "The value the filter compares to the target trace or span field.",
          "type": "string"
        },
        "in_values": {
          "description": "Values the filter tests against when using IN or NOT_IN match type.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "apiError": {
      "properties": {
        "code": {
          "description": "An optional private error code whose values are undefined.",
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "description": "An error message describing what went wrong.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "configv1PageParams": {
      "properties": {
        "max_size": {
          "description": "Page size preference (i.e. how many items are returned in the next\npage). If zero, the server will use a default. Regardless of what size\nis given, clients must never assume how many items will be returned.",
          "format": "int64",
          "type": "integer"
        },
        "token": {
          "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "configv1PageResult": {
      "properties": {
        "next_token": {
          "description": "Opaque page token which identifies the next page of items which the\nclient should request. An empty next_token indicates that there are no\nmore items to return.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableAutocompleteResponse": {
      "properties": {
        "suggestions": {
          "items": {
            "$ref": "#/definitions/dataunstableSuggestion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableCancelLogQueryResponse": {
      "type": "object"
    },
    "dataunstableColumnMeta": {
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/dataunstableColumnMetaType"
        }
      },
      "type": "object"
    },
    "dataunstableColumnMetaType": {
      "enum": [
        "BOOLEAN",
        "FLOAT",
        "STRING"
      ],
      "type": "string"
    },
    "dataunstableCreateEventRequest": {
      "properties": {
        "event": {
          "$ref": "#/definitions/dataunstableEvent"
        }
      },
      "type": "object"
    },
    "dataunstableCreateEventResponse": {
      "type": "object"
    },
    "dataunstableEvent": {
      "properties": {
        "title": {
          "description": "A short description of the event that occurred, such as an email subject.\nMax length, 100 characters.",
          "type": "string"
        },
        "happened_at": {
          "description": "The time the event occurred. Must be between 24 hours in the past or 24 hours\nin the future. Defaults to `now` if not specified.",
          "format": "date-time",
          "type": "string"
        },
        "category": {
          "description": "The category the event belongs to. Must be one of these categories:\n`alerts`, `broadcasts`, `chronosphere`, `deploys`, `feature_flags`,\n`infrastructure`, `third_party`.",
          "type": "string"
        },
        "type": {
          "description": "The event type, used to group and differentiate events within a `category`\nor `source`.",
          "type": "string"
        },
        "source": {
          "description": "Identifies where the data originated, in cases where a change to the\ninstrumentation or integration is needed. Max length, 50 characters.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of user-supplied key:value pairs associated with the event. Max 200 labels\nper event. Key max length, 200 characters. Value max length, 5,000\ncharacters.",
          "type": "object"
        },
        "json_payload": {
          "description": "A string representation of the original event JSON. Max length 100,000 characters. Only json_payload or\nraw_json_payload can be set.",
          "type": "string"
        },
        "raw_json_payload": {
          "description": "The JSON payload if the original event was in JSON format. Formatted as JSON. Max length,\n100,000 characters. Input Only. Only json_payload or raw_json_payload may be set.",
          "type": "object"
        },
        "id": {
          "description": "Unique identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableEventBucket": {
      "description": "A single histogram bucket.",
      "properties": {
        "groups": {
          "description": "The grouped data in this bucket. Ordered alphabetically by group name.",
          "items": {
            "$ref": "#/definitions/EventBucketGroup"
          },
          "type": "array"
        },
        "start_time": {
          "description": "The start time of the time range this bucket covers.",
          "format": "date-time",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of the time range this bucket covers.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableEventDetails": {
      "properties": {
        "happened_at": {
          "description": "The time the event occurred.",
          "format": "date-time",
          "type": "string"
        },
        "category": {
          "description": "The category the event belongs to.",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableEventField": {
      "enum": [
        "CATEGORY_EVENT_FIELD",
        "TYPE_EVENT_FIELD",
        "SOURCE_EVENT_FIELD",
        "LABEL_NAME_EVENT_FIELD",
        "LABEL_VALUE_EVENT_FIELD",
        "LENS_SERVICE_EVENT_FIELD"
      ],
      "type": "string"
    },
    "dataunstableEventGrafanaAnnotation": {
      "description": "EventGrafanaAnnotation represents Event as a grafana annotation.",
      "properties": {
        "id": {
          "description": "Unique identifier.",
          "type": "string"
        },
        "login": {
          "description": "The email of the user that created the event if available.",
          "type": "string"
        },
        "time": {
          "description": "The happened_at of the event.",
          "format": "date-time",
          "type": "string"
        },
        "time_end": {
          "description": "The happened_at of the event",
          "format": "date-time",
          "type": "string"
        },
        "text": {
          "description": "The title of the event.",
          "type": "string"
        },
        "tags": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The properties and labels of the event. Grafana expects these to be a list of string\nbut to make it easier for our plugin we return it as a map of string.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "dataunstableEventHistogramWithDetails": {
      "properties": {
        "event_bucket": {
          "$ref": "#/definitions/dataunstableEventBucket"
        },
        "event": {
          "$ref": "#/definitions/dataunstableEventDetails"
        }
      },
      "type": "object"
    },
    "dataunstableGetEventHistogramResponse": {
      "properties": {
        "buckets": {
          "description": "List of histogram buckets ordered in ASC order by start_time.",
          "items": {
            "$ref": "#/definitions/dataunstableEventBucket"
          },
          "type": "array"
        },
        "total_events": {
          "description": "The total number of events with this filter and time range.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableGetEventResponse": {
      "properties": {
        "event": {
          "$ref": "#/definitions/dataunstableEvent"
        }
      },
      "type": "object"
    },
    "dataunstableGetEventsForMonitorResponse": {
      "properties": {
        "event_histogram_with_details": {
          "description": "The buckets and individual events making up a time range",
          "items": {
            "$ref": "#/definitions/dataunstableEventHistogramWithDetails"
          },
          "type": "array"
        },
        "total_events": {
          "description": "The total number of events in the time range",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableGetInstantQueryResponse": {
      "properties": {
        "groups": {
          "description": "The grouped data at this instant. Ordered alphabetically by group name.",
          "items": {
            "$ref": "#/definitions/dataunstableGroupByOutput"
          },
          "type": "array"
        },
        "grouped_by": {
          "description": "The names of the labels by which the results are grouped by.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "limit_enforced": {
          "description": "This field indicates whether the result is truncated by the limit requested.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "dataunstableGetLogClusterExecutionsResponse": {
      "properties": {
        "summaries": {
          "items": {
            "$ref": "#/definitions/GetLogClusterExecutionsResponseExecutionSummary"
          },
          "type": "array"
        },
        "page": {
          "$ref": "#/definitions/configv1PageResult"
        }
      },
      "type": "object"
    },
    "dataunstableGetLogClusterUsageResponse": {
      "properties": {
        "key": {
          "type": "string"
        },
        "cluster_id": {
          "format": "int64",
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "utility_score": {
          "format": "float",
          "type": "number"
        },
        "utility_score_previous": {
          "format": "float",
          "type": "number"
        },
        "volume_bytes": {
          "format": "uint64",
          "type": "string"
        },
        "volume_bytes_previous": {
          "format": "uint64",
          "type": "string"
        },
        "volume_bytes_24h": {
          "format": "uint64",
          "type": "string"
        },
        "volume_bytes_24h_previous": {
          "format": "uint64",
          "type": "string"
        },
        "executions": {
          "$ref": "#/definitions/dataunstableGetLogClusterUsageResponseExecutions"
        },
        "volume_bytes_buckets": {
          "items": {
            "$ref": "#/definitions/GetLogClusterUsageResponseUsageBucket"
          },
          "type": "array"
        },
        "references": {
          "$ref": "#/definitions/GetLogClusterUsageResponseReferences"
        },
        "recommendation": {
          "$ref": "#/definitions/GetLogClusterUsageResponseRecommendation"
        },
        "log_query": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableGetLogClusterUsageResponseExecutions": {
      "properties": {
        "dashboards": {
          "format": "uint64",
          "type": "string"
        },
        "explorer": {
          "format": "uint64",
          "type": "string"
        },
        "unique_users": {
          "format": "uint64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableGetLogHistogramResponse": {
      "properties": {
        "buckets": {
          "description": "List of histogram buckets ordered in ASC order by start_time.",
          "items": {
            "$ref": "#/definitions/dataunstableLogBucket"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableGetLoggingUsageResponse": {
      "properties": {
        "clusters": {
          "items": {
            "$ref": "#/definitions/dataunstableGetLoggingUsageResponseLogCluster"
          },
          "type": "array"
        },
        "meta": {
          "$ref": "#/definitions/GetLoggingUsageResponseMetadata"
        },
        "page": {
          "$ref": "#/definitions/configv1PageResult"
        }
      },
      "type": "object"
    },
    "dataunstableGetLoggingUsageResponseLogCluster": {
      "properties": {
        "key": {
          "type": "string"
        },
        "cluster_id": {
          "format": "int64",
          "type": "string"
        },
        "pattern": {
          "type": "string"
        },
        "utility_score": {
          "format": "float",
          "type": "number"
        },
        "utility_score_previous": {
          "format": "float",
          "type": "number"
        },
        "volume_bytes": {
          "format": "uint64",
          "type": "string"
        },
        "volume_bytes_previous": {
          "format": "uint64",
          "type": "string"
        },
        "volume_bytes_24h": {
          "format": "uint64",
          "type": "string"
        },
        "volume_bytes_24h_previous": {
          "format": "uint64",
          "type": "string"
        },
        "last_updated_at": {
          "format": "date-time",
          "type": "string"
        },
        "log_query": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableGetRangeQueryResponse": {
      "properties": {
        "metadata": {
          "$ref": "#/definitions/GetRangeQueryResponseRangeQueryMetadata"
        },
        "time_series_data": {
          "$ref": "#/definitions/dataunstableLogQueryTimeSeriesData"
        },
        "grid_data": {
          "$ref": "#/definitions/dataunstableLogQueryGridData"
        }
      },
      "type": "object"
    },
    "dataunstableGetTenantConfigurationResponse": {
      "properties": {
        "data_retention_days": {
          "description": "Number of days the tenant is configured to",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstableGroupByInput": {
      "properties": {
        "field_names": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableGroupByOutput": {
      "description": "A single group of logs within a bucket.",
      "properties": {
        "field_values": {
          "description": "The name of this group within the bucket. Set to the value of the group_by field.\nUnset if group_by is unset.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "value": {
          "description": "The value of the aggregation in this group within the bucket.",
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "dataunstableListEventFieldValuesResponse": {
      "properties": {
        "values": {
          "description": "Field values are ordered by frequency of occurrence and then alphabetical order is used\nas the tiebreaker.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableListEventGrafanaAnnotationsResponse": {
      "properties": {
        "events": {
          "items": {
            "$ref": "#/definitions/dataunstableEventGrafanaAnnotation"
          },
          "type": "array"
        },
        "page": {
          "$ref": "#/definitions/configv1PageResult"
        },
        "query": {
          "description": "Returns the query that was used to generate the request.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableListEventsResponse": {
      "properties": {
        "events": {
          "items": {
            "$ref": "#/definitions/dataunstableEvent"
          },
          "type": "array"
        },
        "page": {
          "$ref": "#/definitions/configv1PageResult"
        }
      },
      "type": "object"
    },
    "dataunstableListLogFieldNamesResponse": {
      "properties": {
        "suggestions": {
          "items": {
            "$ref": "#/definitions/dataunstableSuggestion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableListLogFieldValuesResponse": {
      "properties": {
        "suggestions": {
          "items": {
            "$ref": "#/definitions/dataunstableSuggestion"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableListLogsResponse": {
      "properties": {
        "logs": {
          "items": {
            "$ref": "#/definitions/dataunstableLog"
          },
          "type": "array"
        },
        "page": {
          "$ref": "#/definitions/configv1PageResult"
        },
        "clusters": {
          "description": "Clusters for the listed logs.",
          "items": {
            "$ref": "#/definitions/dataunstableLogCluster"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableLog": {
      "properties": {
        "timestamp": {
          "description": "Timestamp recorded on the log message.",
          "format": "date-time",
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Data contains all the data for the log.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "dataunstableLogBucket": {
      "description": "A single histogram bucket.",
      "properties": {
        "groups": {
          "description": "The grouped data in this bucket. Ordered alphabetically by group name.",
          "items": {
            "$ref": "#/definitions/dataunstableGroupByOutput"
          },
          "type": "array"
        },
        "start_time": {
          "description": "The start time of the time range this bucket covers.",
          "format": "date-time",
          "type": "string"
        },
        "end_time": {
          "description": "The end time of the time range this bucket covers.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableLogCluster": {
      "properties": {
        "pattern": {
          "description": "The pattern that represents this cluster.",
          "type": "string"
        },
        "num_logs": {
          "description": "Number of logs present in this cluster.",
          "format": "int64",
          "type": "integer"
        },
        "filter": {
          "description": "Filter expression that can be used to select logs matching the cluster.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableLogClusterId": {
      "properties": {
        "key": {
          "type": "string"
        },
        "cluster_id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableLogFilter": {
      "properties": {
        "happened_after": {
          "description": "Only log messages with a timestamp after this time will be returned.",
          "format": "date-time",
          "type": "string"
        },
        "happened_before": {
          "description": "Only log messages with a timestamp before this time will be returned.",
          "format": "date-time",
          "type": "string"
        },
        "query": {
          "description": "Specifies the query to run to filter logs. Query defined using logql.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableLogQueryGridData": {
      "properties": {
        "columns": {
          "items": {
            "$ref": "#/definitions/dataunstableColumnMeta"
          },
          "type": "array"
        },
        "rows": {
          "items": {
            "$ref": "#/definitions/dataunstableRow"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableLogQueryListData": {
      "properties": {
        "logs": {
          "items": {
            "$ref": "#/definitions/dataunstableLog"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableLogQueryTimeSeriesData": {
      "properties": {
        "series": {
          "items": {
            "$ref": "#/definitions/LogQueryTimeSeriesDataLogQueryTimeSeries"
          },
          "type": "array"
        },
        "group_by_dimension_names": {
          "description": "The names of the dimensions by which the results are grouped by.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstablePassThroughQueryResponse": {
      "type": "object"
    },
    "dataunstablePollListLogFieldNamesResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "is_finished": {
          "type": "boolean"
        },
        "progress": {
          "format": "float",
          "type": "number"
        },
        "suggestions": {
          "items": {
            "$ref": "#/definitions/dataunstableSuggestion"
          },
          "type": "array"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstablePollListLogFieldValuesResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "is_finished": {
          "type": "boolean"
        },
        "progress": {
          "format": "float",
          "type": "number"
        },
        "suggestions": {
          "items": {
            "$ref": "#/definitions/dataunstableSuggestion"
          },
          "type": "array"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstablePollListLogsResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "is_finished": {
          "type": "boolean"
        },
        "progress": {
          "format": "float",
          "type": "number"
        },
        "logs": {
          "items": {
            "$ref": "#/definitions/dataunstableLog"
          },
          "type": "array"
        },
        "page": {
          "$ref": "#/definitions/configv1PageResult"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        },
        "clusters": {
          "description": "Clusters for the listed logs.",
          "items": {
            "$ref": "#/definitions/dataunstableLogCluster"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstablePollLogHistogramResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "is_finished": {
          "type": "boolean"
        },
        "progress": {
          "format": "float",
          "type": "number"
        },
        "buckets": {
          "description": "List of histogram buckets ordered in ASC order by start_time.",
          "items": {
            "$ref": "#/definitions/dataunstableLogBucket"
          },
          "type": "array"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstablePollRangeQueryResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "is_finished": {
          "type": "boolean"
        },
        "progress": {
          "format": "float",
          "type": "number"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        },
        "metadata": {
          "$ref": "#/definitions/GetRangeQueryResponseRangeQueryMetadata"
        },
        "time_series_data": {
          "$ref": "#/definitions/dataunstableLogQueryTimeSeriesData"
        },
        "list_data": {
          "$ref": "#/definitions/dataunstableLogQueryListData"
        },
        "grid_data": {
          "$ref": "#/definitions/dataunstableLogQueryGridData"
        }
      },
      "type": "object"
    },
    "dataunstableRangeQueryPageParams": {
      "properties": {
        "token": {
          "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableRangeQueryPageResult": {
      "properties": {
        "next_token": {
          "description": "Opaque page token which identifies the next page of items which the\nclient should request. An empty next_token indicates that there are no\nmore items to return.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableRow": {
      "properties": {
        "values": {
          "items": {
            "$ref": "#/definitions/dataunstableValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "dataunstableStartListLogFieldNamesResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstableStartListLogFieldValuesResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstableStartListLogsResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstableStartLogHistogramResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstableStartRangeQueryResponse": {
      "properties": {
        "query_id": {
          "type": "string"
        },
        "refresh_interval_ms": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstableSuggestion": {
      "properties": {
        "value": {
          "type": "string"
        },
        "count": {
          "description": "The number of times this suggested value is seen in the query result.\nThe value could be approximate and not complete.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "dataunstableTimestampFilter": {
      "properties": {
        "happened_after": {
          "description": "Only log messages with a timestamp after this time will be returned.",
          "format": "date-time",
          "type": "string"
        },
        "happened_before": {
          "description": "Only log messages with a timestamp before this time will be returned.",
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "dataunstableValue": {
      "properties": {
        "bool_value": {
          "type": "boolean"
        },
        "float_value": {
          "format": "double",
          "type": "number"
        },
        "string_value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "datav1ListTracesRequest": {
      "properties": {
        "query_type": {
          "$ref": "#/definitions/ListTracesRequestQueryType"
        },
        "trace_ids": {
          "description": "Trace IDs to search for.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "start_time": {
          "description": "Start time for the search.",
          "format": "date-time",
          "type": "string"
        },
        "end_time": {
          "description": "End time for the search.",
          "format": "date-time",
          "type": "string"
        },
        "service": {
          "description": "Service to filter on. An empty value doesn't apply any service filter.",
          "type": "string"
        },
        "operation": {
          "description": "Operation to filter on. An empty value doesn't apply any operation filter.",
          "type": "string"
        },
        "tag_filters": {
          "description": "Tag filter to apply. An empty value doesn't apply any tag filter.",
          "items": {
            "$ref": "#/definitions/ListTracesRequestTagFilter"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "datav1ListTracesResponse": {
      "properties": {
        "traces": {
          "items": {
            "$ref": "#/definitions/v1TracesData"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "genericError": {
      "additionalProperties": true,
      "type": "object"
    },
    "googlerpcStatus": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "items": {
            "$ref": "#/definitions/protobufAny"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "protobufAny": {
      "additionalProperties": {},
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "protobufNullValue": {
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\nThe JSON representation for `NullValue` is JSON `null`.",
      "type": "string"
    },
    "resourcev1Resource": {
      "description": "Resource information.",
      "properties": {
        "attributes": {
          "description": "Set of attributes that describe the resource.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key).",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "type": "array"
        },
        "dropped_attributes_count": {
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0, then\nno attributes were dropped.",
          "format": "int64",
          "type": "integer"
        },
        "entity_refs": {
          "description": "Set of entities that participate in this Resource.\n\nNote: keys in the references MUST exist in attributes of this message.\n\nStatus: [Development]",
          "items": {
            "$ref": "#/definitions/v1EntityRef"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "tracev1Status": {
      "description": "The Status type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs.",
      "properties": {
        "message": {
          "description": "A developer-facing human readable error message.",
          "type": "string"
        },
        "code": {
          "$ref": "#/definitions/StatusStatusCode"
        }
      },
      "type": "object"
    },
    "v1AnyValue": {
      "description": "AnyValue is used to represent any type of attribute value. AnyValue may contain a\nprimitive value such as a string or integer or it may contain an arbitrary nested\nobject containing arrays, key-value lists and primitives.",
      "properties": {
        "string_value": {
          "type": "string"
        },
        "bool_value": {
          "type": "boolean"
        },
        "int_value": {
          "format": "int64",
          "type": "string"
        },
        "double_value": {
          "format": "double",
          "type": "number"
        },
        "array_value": {
          "$ref": "#/definitions/v1ArrayValue"
        },
        "kvlist_value": {
          "$ref": "#/definitions/v1KeyValueList"
        },
        "bytes_value": {
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ArrayValue": {
      "description": "ArrayValue is a list of AnyValue messages. We need ArrayValue as a message\nsince oneof in AnyValue does not allow repeated fields.",
      "properties": {
        "values": {
          "description": "Array of values. The array may be empty (contain 0 elements).",
          "items": {
            "$ref": "#/definitions/v1AnyValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1EntityRef": {
      "description": "A reference to an Entity.\nEntity represents an object of interest associated with produced telemetry: e.g spans, metrics, profiles, or logs.\n\nStatus: [Development]",
      "properties": {
        "schema_url": {
          "description": "This schema_url applies to the data in this message and to the Resource attributes\nreferenced by id_keys and description_keys.\nTODO: discuss if we are happy with this somewhat complicated definition of what\nthe schema_url applies to.\n\nThis field obsoletes the schema_url field in ResourceMetrics/ResourceSpans/ResourceLogs.",
          "title": "The Schema URL, if known. This is the identifier of the Schema that the entity data\nis recorded in. To learn more about Schema URL see\nhttps://opentelemetry.io/docs/specs/otel/schemas/#schema-url",
          "type": "string"
        },
        "type": {
          "description": "Defines the type of the entity. MUST not change during the lifetime of the entity.\nFor example: \"service\" or \"host\". This field is required and MUST not be empty\nfor valid entities.",
          "type": "string"
        },
        "id_keys": {
          "description": "Attribute Keys that identify the entity.\nMUST not change during the lifetime of the entity. The Id must contain at least one attribute.\nThese keys MUST exist in the containing {message}.attributes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description_keys": {
          "description": "Descriptive (non-identifying) attribute keys of the entity.\nMAY change over the lifetime of the entity. MAY be empty.\nThese attribute keys are not part of entity's identity.\nThese keys MUST exist in the containing {message}.attributes.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1InstrumentationScope": {
      "description": "InstrumentationScope is a message representing the instrumentation scope information\nsuch as the fully qualified name and version.",
      "properties": {
        "name": {
          "description": "An empty instrumentation scope name means the name is unknown.",
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "attributes": {
          "description": "Additional attributes that describe the scope. [Optional].\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key).",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "type": "array"
        },
        "dropped_attributes_count": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1KeyValue": {
      "description": "KeyValue is a key-value pair that is used to store Span attributes, Link\nattributes, etc.",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/v1AnyValue"
        }
      },
      "type": "object"
    },
    "v1KeyValueList": {
      "description": "KeyValueList is a list of KeyValue messages. We need KeyValueList as a message\nsince `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need\na list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to\navoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches\nare semantically equivalent.",
      "properties": {
        "values": {
          "description": "A collection of key/value pairs of key-value pairs. The list may be empty (may\ncontain 0 elements).\nThe keys MUST be unique (it is not allowed to have more than one\nvalue with the same key).",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "v1ResourceSpans": {
      "description": "A collection of ScopeSpans from a Resource.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/resourcev1Resource"
        },
        "scope_spans": {
          "description": "A list of ScopeSpans that originate from a resource.",
          "items": {
            "$ref": "#/definitions/v1ScopeSpans"
          },
          "type": "array"
        },
        "schema_url": {
          "description": "The Schema URL, if known. This is the identifier of the Schema that the resource data\nis recorded in. Notably, the last part of the URL path is the version number of the\nschema: http[s]://server[:port]/path/\u003cversion\u003e. To learn more about Schema URL see\nhttps://opentelemetry.io/docs/specs/otel/schemas/#schema-url\nThis schema_url applies to the data in the \"resource\" field. It does not apply\nto the data in the \"scope_spans\" field which have their own schema_url field.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1ScopeSpans": {
      "description": "A collection of Spans produced by an InstrumentationScope.",
      "properties": {
        "scope": {
          "$ref": "#/definitions/v1InstrumentationScope"
        },
        "spans": {
          "description": "A list of Spans that originate from an instrumentation scope.",
          "items": {
            "$ref": "#/definitions/v1Span"
          },
          "type": "array"
        },
        "schema_url": {
          "description": "The Schema URL, if known. This is the identifier of the Schema that the span data\nis recorded in. Notably, the last part of the URL path is the version number of the\nschema: http[s]://server[:port]/path/\u003cversion\u003e. To learn more about Schema URL see\nhttps://opentelemetry.io/docs/specs/otel/schemas/#schema-url\nThis schema_url applies to all spans and span events in the \"spans\" field.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "v1Span": {
      "description": "A Span represents a single operation performed by a single component of the system.\n\nThe next available field id is 17.",
      "properties": {
        "trace_id": {
          "description": "A unique identifier for a trace. All spans from the same trace share\nthe same `trace_id`. The ID is a 16-byte array. An ID with all zeroes OR\nof length other than 16 bytes is considered invalid (empty string in OTLP/JSON\nis zero-length and thus is also invalid).\n\nThis field is required.",
          "format": "byte",
          "type": "string"
        },
        "span_id": {
          "description": "A unique identifier for a span within a trace, assigned when the span\nis created. The ID is an 8-byte array. An ID with all zeroes OR of length\nother than 8 bytes is considered invalid (empty string in OTLP/JSON\nis zero-length and thus is also invalid).\n\nThis field is required.",
          "format": "byte",
          "type": "string"
        },
        "trace_state": {
          "description": "trace_state conveys information about request position in multiple distributed tracing graphs.\nIt is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header\nSee also https://github.com/w3c/distributed-tracing for more details about this field.",
          "type": "string"
        },
        "parent_span_id": {
          "description": "The `span_id` of this span's parent span. If this is a root span, then this\nfield must be empty. The ID is an 8-byte array.",
          "format": "byte",
          "type": "string"
        },
        "flags": {
          "description": "Flags, a bit field.\n\nBits 0-7 (8 least significant bits) are the trace flags as defined in W3C Trace\nContext specification. To read the 8-bit W3C trace flag, use\n`flags \u0026 SPAN_FLAGS_TRACE_FLAGS_MASK`.\n\nSee https://www.w3.org/TR/trace-context-2/#trace-flags for the flag definitions.\n\nBits 8 and 9 represent the 3 states of whether a span's parent\nis remote. The states are (unknown, is not remote, is remote).\nTo read whether the value is known, use `(flags \u0026 SPAN_FLAGS_CONTEXT_HAS_IS_REMOTE_MASK) != 0`.\nTo read whether the span is remote, use `(flags \u0026 SPAN_FLAGS_CONTEXT_IS_REMOTE_MASK) != 0`.\n\nWhen creating span messages, if the message is logically forwarded from another source\nwith an equivalent flags fields (i.e., usually another OTLP span message), the field SHOULD\nbe copied as-is. If creating from a source that does not have an equivalent flags field\n(such as a runtime representation of an OpenTelemetry span), the high 22 bits MUST\nbe set to zero.\nReaders MUST NOT assume that bits 10-31 (22 most significant bits) will be zero.\n\n[Optional].",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "A description of the span's operation.\n\nFor example, the name can be a qualified method name or a file name\nand a line number where the operation is called. A best practice is to use\nthe same display name at the same call point in an application.\nThis makes it easier to correlate spans in different traces.\n\nThis field is semantically required to be set to non-empty string.\nEmpty value is equivalent to an unknown span name.\n\nThis field is required.",
          "type": "string"
        },
        "kind": {
          "$ref": "#/definitions/SpanSpanKind"
        },
        "start_time_unix_nano": {
          "description": "start_time_unix_nano is the start time of the span. On the client side, this is the time\nkept by the local machine where the span execution starts. On the server side, this\nis the time when the server's application handler starts running.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\nThis field is semantically required and it is expected that end_time \u003e= start_time.",
          "format": "uint64",
          "type": "string"
        },
        "end_time_unix_nano": {
          "description": "end_time_unix_nano is the end time of the span. On the client side, this is the time\nkept by the local machine where the span execution ends. On the server side, this\nis the time when the server application handler stops running.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\nThis field is semantically required and it is expected that end_time \u003e= start_time.",
          "format": "uint64",
          "type": "string"
        },
        "attributes": {
          "description": "\"/http/user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n    \"/http/server_latency\": 300\n    \"example.com/myattribute\": true\n    \"example.com/score\": 10.239\n\nThe OpenTelemetry API specification further restricts the allowed value types:\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/README.md#attribute\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key).",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "title": "attributes is a collection of key/value pairs. Note, global attributes\nlike server name can be set using the resource API. Examples of attributes:",
          "type": "array"
        },
        "dropped_attributes_count": {
          "description": "dropped_attributes_count is the number of attributes that were discarded. Attributes\ncan be discarded because their keys are too long or because there are too many\nattributes. If this value is 0, then no attributes were dropped.",
          "format": "int64",
          "type": "integer"
        },
        "events": {
          "description": "events is a collection of Event items.",
          "items": {
            "$ref": "#/definitions/v1SpanEvent"
          },
          "type": "array"
        },
        "dropped_events_count": {
          "description": "dropped_events_count is the number of dropped events. If the value is 0, then no\nevents were dropped.",
          "format": "int64",
          "type": "integer"
        },
        "links": {
          "description": "links is a collection of Links, which are references from this span to a span\nin the same or different trace.",
          "items": {
            "$ref": "#/definitions/SpanLink"
          },
          "type": "array"
        },
        "dropped_links_count": {
          "description": "dropped_links_count is the number of dropped links after the maximum size was\nenforced. If this value is 0, then no links were dropped.",
          "format": "int64",
          "type": "integer"
        },
        "status": {
          "$ref": "#/definitions/tracev1Status"
        }
      },
      "type": "object"
    },
    "v1SpanEvent": {
      "description": "Event is a time-stamped annotation of the span, consisting of user-supplied\ntext description and key-value pairs.",
      "properties": {
        "time_unix_nano": {
          "description": "time_unix_nano is the time the event occurred.",
          "format": "uint64",
          "type": "string"
        },
        "name": {
          "description": "name of the event.\nThis field is semantically required to be set to non-empty string.",
          "type": "string"
        },
        "attributes": {
          "description": "attributes is a collection of attribute key/value pairs on the event.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key).",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "type": "array"
        },
        "dropped_attributes_count": {
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0,\nthen no attributes were dropped.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "v1TracesData": {
      "description": "TracesData represents the traces data that can be stored in a persistent storage,\nOR can be embedded by other protocols that transfer OTLP traces data but do\nnot implement the OTLP protocol.\n\nThe main difference between this message and collector protocol is that\nin this message there will not be any \"control\" or \"metadata\" specific to\nOTLP protocol.\n\nWhen new fields are added into this message, the OTLP request MUST be updated\nas well.",
      "properties": {
        "resource_spans": {
          "description": "An array of ResourceSpans.\nFor data coming from a single resource this array will typically contain\none element. Intermediary nodes that receive data from multiple origins\ntypically batch the data before forwarding further and in that case this\narray will contain multiple elements.",
          "items": {
            "$ref": "#/definitions/v1ResourceSpans"
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "info": {
    "description": "\n\u003cb\u003eWARNING: This API is unstable and is meant for experimentation only. Do not\nuse this API in production. The endpoints and schemas referenced in this\ndocumentation will be changed or removed without notice and without any\nbackwards compatibility guarantee. Note that even though this API is unstable,\nit is still connected to production data, so use with caution.\u003c/b\u003e",
    "title": "Data Unstable API",
    "version": "v1"
  },
  "paths": {
    "/api/unstable/data/events": {
      "get": {
        "operationId": "ListEvents",
        "parameters": [
          {
            "description": "Only events which happened_at after this time will be returned. If set, happened_before must also be set.\nIf no time range is set, defaults to 1 hour ago.",
            "format": "date-time",
            "in": "query",
            "name": "happened_after",
            "type": "string"
          },
          {
            "description": "Only events which happened_at before this will be returned. If set, happened_after must also be set.\nIf no time range is set, defaults to now.",
            "format": "date-time",
            "in": "query",
            "name": "happened_before",
            "type": "string"
          },
          {
            "description": "A query string specifying the query.",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "Page size preference (i.e. how many items are returned in the next\npage). If zero, the server will use a default. Regardless of what size\nis given, clients must never assume how many items will be returned.",
            "format": "int64",
            "in": "query",
            "name": "page.max_size",
            "type": "integer"
          },
          {
            "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
            "in": "query",
            "name": "page.token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableListEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      },
      "post": {
        "operationId": "CreateEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataunstableCreateEventRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableCreateEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/events/{id}": {
      "get": {
        "operationId": "GetEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/events:field-values": {
      "get": {
        "operationId": "ListEventFieldValues",
        "parameters": [
          {
            "description": "The field for which to look up possible values for.",
            "enum": [
              "CATEGORY_EVENT_FIELD",
              "TYPE_EVENT_FIELD",
              "SOURCE_EVENT_FIELD",
              "LABEL_NAME_EVENT_FIELD",
              "LABEL_VALUE_EVENT_FIELD",
              "LENS_SERVICE_EVENT_FIELD"
            ],
            "in": "query",
            "name": "field",
            "type": "string"
          },
          {
            "description": "Required if field is set to label name, otherwise should not be set.",
            "in": "query",
            "name": "label_name",
            "type": "string"
          },
          {
            "description": "The current query subject to autocompletion. The query will be parsed, and current filters applied to limit the\nresults returned based on context. If the query cannot be parsed, all values for the field are returned.\nOnly one of `query` or `scope` can be set.",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "The index of the incomplete field in the query to generate values for. Ignored if no query is set.",
            "format": "int64",
            "in": "query",
            "name": "autocomplete_index",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "The list of categories to scope event field values by.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "scope.categories",
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "The list of types to scope event field values by.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "scope.types",
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "The list of sources to scope event field values by.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "scope.sources",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableListEventFieldValuesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/events:grafana-annotations": {
      "get": {
        "operationId": "ListEventGrafanaAnnotations",
        "parameters": [
          {
            "description": "Only events which happened_at after this time will be returned. If set, happened_before must also be set.\nIf no time range is set, defaults to 1 hour ago.",
            "format": "date-time",
            "in": "query",
            "name": "happened_after",
            "type": "string"
          },
          {
            "description": "Only events which happened_at before this will be returned. If set, happened_after must also be set.\nIf no time range is set, defaults to now.",
            "format": "date-time",
            "in": "query",
            "name": "happened_before",
            "type": "string"
          },
          {
            "description": "A query string specifying the query.",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "Page size preference (i.e. how many items are returned in the next\npage). If zero, the server will use a default. Regardless of what size\nis given, clients must never assume how many items will be returned.",
            "format": "int64",
            "in": "query",
            "name": "page.max_size",
            "type": "integer"
          },
          {
            "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
            "in": "query",
            "name": "page.token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableListEventGrafanaAnnotationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/events:histogram": {
      "get": {
        "operationId": "GetEventHistogram",
        "parameters": [
          {
            "description": "Only events which happened_at after this time will be included. If set, happened_before must also be set.\nIf no time range is set, defaults to 1 hour ago.",
            "format": "date-time",
            "in": "query",
            "name": "happened_after",
            "type": "string"
          },
          {
            "description": "Only events which happened_at will be included. If set, happened_after must also be set.\nIf no time range is set, defaults to now.",
            "format": "date-time",
            "in": "query",
            "name": "happened_before",
            "type": "string"
          },
          {
            "description": "Duration each bucket in histogram should have. Must be greater than 10 seconds.",
            "in": "query",
            "name": "step_size",
            "type": "string"
          },
          {
            "description": "A query string specifying the query.",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "Optional event field to group results within each bucket.\nMay be “category”, “type”, or unset to have one group per bucket.",
            "in": "query",
            "name": "group_by",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetEventHistogramResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/events:histogram-with-details": {
      "get": {
        "operationId": "GetEventsForMonitor",
        "parameters": [
          {
            "description": "Only events which happened_at after this time will be included. If set, happened_before must also be set.\nIf no time range is set, defaults to 1 hour ago.",
            "format": "date-time",
            "in": "query",
            "name": "happened_after",
            "type": "string"
          },
          {
            "description": "Only events which happened_at will be included. If set, happened_after must also be set.\nIf no time range is set, defaults to now.",
            "format": "date-time",
            "in": "query",
            "name": "happened_before",
            "type": "string"
          },
          {
            "description": "Duration each bucket in histogram should have. Must be greater than 10 seconds.",
            "in": "query",
            "name": "step_size",
            "type": "string"
          },
          {
            "description": "A query string specifying the query.",
            "in": "query",
            "name": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetEventsForMonitorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs": {
      "get": {
        "description": "Logging.",
        "operationId": "ListLogs",
        "parameters": [
          {
            "description": "Page size preference (i.e. how many items are returned in the next\npage). If zero, the server will use a default. Regardless of what size\nis given, clients must never assume how many items will be returned.",
            "format": "int64",
            "in": "query",
            "name": "page.max_size",
            "type": "integer"
          },
          {
            "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
            "in": "query",
            "name": "page.token",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "log_filter.query",
            "type": "string"
          },
          {
            "description": "The ID of the log to be pinned.",
            "in": "query",
            "name": "pinned_log_id",
            "type": "string"
          },
          {
            "description": "Specifies sort order for returned logs. We only support sorting logs by timestamp.\nDefault value is DESC (most recent logs first).",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "timestamp_sort",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableListLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:autocomplete": {
      "get": {
        "operationId": "Autocomplete",
        "parameters": [
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "log_filter.query",
            "type": "string"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "index",
            "type": "integer"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableAutocompleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:cancel-query": {
      "get": {
        "operationId": "CancelLogQuery",
        "parameters": [
          {
            "in": "query",
            "name": "query_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableCancelLogQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:get-instant-query": {
      "get": {
        "description": "GetInstantQuery returns an instant query aggregated query.",
        "operationId": "GetInstantQuery",
        "parameters": [
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "The timestamp with which to evaluate the query.",
            "format": "date-time",
            "in": "query",
            "name": "timestamp_nanos",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetInstantQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:get-log-cluster-executions": {
      "get": {
        "operationId": "GetLogClusterExecutions",
        "parameters": [
          {
            "in": "query",
            "name": "id.key",
            "type": "string"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "id.cluster_id",
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "enum": [
              "LOG_EXPLORER",
              "DASHBOARD"
            ],
            "in": "query",
            "name": "execution_type",
            "type": "string"
          },
          {
            "description": "Page size preference (i.e. how many items are returned in the next\npage). If zero, the server will use a default. Regardless of what size\nis given, clients must never assume how many items will be returned.",
            "format": "int64",
            "in": "query",
            "name": "page.max_size",
            "type": "integer"
          },
          {
            "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
            "in": "query",
            "name": "page.token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetLogClusterExecutionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:get-log-cluster-usage": {
      "get": {
        "operationId": "GetLogClusterUsage",
        "parameters": [
          {
            "in": "query",
            "name": "id.key",
            "type": "string"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "id.cluster_id",
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "before",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetLogClusterUsageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:get-logging-usage": {
      "get": {
        "description": "Logging Usage",
        "operationId": "GetLoggingUsage",
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "Optional list of keys for which to return clusters for. If not set, all clusters are returned.",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "keys",
            "type": "array"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "after",
            "type": "string"
          },
          {
            "format": "date-time",
            "in": "query",
            "name": "before",
            "type": "string"
          },
          {
            "enum": [
              "UTILITY_ASC",
              "UTILITY_DESC",
              "VOLUME_ASC",
              "VOLUME_DESC",
              "VOLUME_24H_ASC",
              "VOLUME_24H_DESC"
            ],
            "in": "query",
            "name": "order",
            "type": "string"
          },
          {
            "description": "Page size preference (i.e. how many items are returned in the next\npage). If zero, the server will use a default. Regardless of what size\nis given, clients must never assume how many items will be returned.",
            "format": "int64",
            "in": "query",
            "name": "page.max_size",
            "type": "integer"
          },
          {
            "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
            "in": "query",
            "name": "page.token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetLoggingUsageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:get-range-query": {
      "get": {
        "description": "GetInstantQuery returns an instant query aggregated query.",
        "operationId": "GetRangeQuery",
        "parameters": [
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "timestamp_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "timestamp_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
            "in": "query",
            "name": "page.token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetRangeQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:get-range-query-poll": {
      "get": {
        "operationId": "PollRangeQuery",
        "parameters": [
          {
            "in": "query",
            "name": "query_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstablePollRangeQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:get-range-query-start": {
      "get": {
        "operationId": "StartRangeQuery",
        "parameters": [
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "query",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "timestamp_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "timestamp_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
            "in": "query",
            "name": "page.token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableStartRangeQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:get-tenant-configuration": {
      "get": {
        "operationId": "GetTenantConfiguration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetTenantConfigurationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:histogram": {
      "get": {
        "operationId": "GetLogHistogram",
        "parameters": [
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "log_filter.query",
            "type": "string"
          },
          {
            "description": "Duration each bucket in histogram should have. Must be greater than 10 seconds.",
            "in": "query",
            "name": "step_size",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "group_by.field_names",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableGetLogHistogramResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:histogram-poll": {
      "get": {
        "operationId": "PollLogHistogramQuery",
        "parameters": [
          {
            "in": "query",
            "name": "query_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstablePollLogHistogramResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:histogram-start": {
      "get": {
        "operationId": "StartLogHistogram",
        "parameters": [
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "log_filter.query",
            "type": "string"
          },
          {
            "description": "Duration each bucket in histogram should have. Must be greater than 10 seconds.",
            "in": "query",
            "name": "step_size",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "group_by.field_names",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableStartLogHistogramResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:list-log-field-names": {
      "get": {
        "operationId": "ListLogFieldNames",
        "parameters": [
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "log_filter.query",
            "type": "string"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableListLogFieldNamesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:list-log-field-names-poll": {
      "get": {
        "operationId": "PollListLogFieldNames",
        "parameters": [
          {
            "in": "query",
            "name": "query_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstablePollListLogFieldNamesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:list-log-field-names-start": {
      "get": {
        "operationId": "StartListLogFieldNames",
        "parameters": [
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "log_filter.query",
            "type": "string"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableStartListLogFieldNamesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:list-log-field-values": {
      "get": {
        "operationId": "ListLogFieldValues",
        "parameters": [
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "log_filter.query",
            "type": "string"
          },
          {
            "in": "query",
            "name": "field_name",
            "type": "string"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableListLogFieldValuesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:list-log-field-values-poll": {
      "get": {
        "operationId": "PollListLogFieldValues",
        "parameters": [
          {
            "in": "query",
            "name": "query_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstablePollListLogFieldValuesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:list-log-field-values-start": {
      "get": {
        "operationId": "StartListLogFieldValues",
        "parameters": [
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "log_filter.query",
            "type": "string"
          },
          {
            "in": "query",
            "name": "field_name",
            "type": "string"
          },
          {
            "format": "int64",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableStartListLogFieldValuesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:list-poll": {
      "get": {
        "operationId": "PollListLogsQuery",
        "parameters": [
          {
            "in": "query",
            "name": "query_id",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstablePollListLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:list-start": {
      "get": {
        "operationId": "StartListLogsQuery",
        "parameters": [
          {
            "description": "Page size preference (i.e. how many items are returned in the next\npage). If zero, the server will use a default. Regardless of what size\nis given, clients must never assume how many items will be returned.",
            "format": "int64",
            "in": "query",
            "name": "page.max_size",
            "type": "integer"
          },
          {
            "description": "Opaque page token identifying which page to request. An empty token\nidentifies the first page.",
            "in": "query",
            "name": "page.token",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp after this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_after",
            "type": "string"
          },
          {
            "description": "Only log messages with a timestamp before this time will be returned.",
            "format": "date-time",
            "in": "query",
            "name": "log_filter.happened_before",
            "type": "string"
          },
          {
            "description": "Specifies the query to run to filter logs. Query defined using logql.",
            "in": "query",
            "name": "log_filter.query",
            "type": "string"
          },
          {
            "description": "The ID of the log to be pinned.",
            "in": "query",
            "name": "pinned_log_id",
            "type": "string"
          },
          {
            "description": "Specifies sort order for returned logs. We only support sorting logs by timestamp.\nDefault value is DESC (most recent logs first).",
            "enum": [
              "ASC",
              "DESC"
            ],
            "in": "query",
            "name": "timestamp_sort",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableStartListLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/logs:pass-through-query": {
      "get": {
        "operationId": "PassThroughQuery",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstablePassThroughQueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/traces": {
      "post": {
        "description": "Tracing",
        "operationId": "ListTraces",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/datav1ListTracesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/datav1ListTracesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "DataUnstable"
        ]
      }
    },
    "/api/unstable/data/alerts:analyze": {
      "post": {
        "summary": "Alerts",
        "operationId": "AnalyzeAlerts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/dataunstableAnalyzeAlertsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "AnalyzeAlertsRequest is the request for the AnalyzeAlerts API.\nRetrieves alerts (aggregated by alert_id) within a given time range that match the provided filters.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dataunstableAnalyzeAlertsRequest"
            }
          }
        ],
        "tags": [
          "DataUnstable"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "tags": [
    {
      "name": "DataUnstable"
    }
  ]
}