// Code generated by go-swagger; DO NOT EDIT.

package version1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewQueryLogsRangeParams creates a new QueryLogsRangeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryLogsRangeParams() *QueryLogsRangeParams {
	return &QueryLogsRangeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryLogsRangeParamsWithTimeout creates a new QueryLogsRangeParams object
// with the ability to set a timeout on a request.
func NewQueryLogsRangeParamsWithTimeout(timeout time.Duration) *QueryLogsRangeParams {
	return &QueryLogsRangeParams{
		timeout: timeout,
	}
}

// NewQueryLogsRangeParamsWithContext creates a new QueryLogsRangeParams object
// with the ability to set a context for a request.
func NewQueryLogsRangeParamsWithContext(ctx context.Context) *QueryLogsRangeParams {
	return &QueryLogsRangeParams{
		Context: ctx,
	}
}

// NewQueryLogsRangeParamsWithHTTPClient creates a new QueryLogsRangeParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryLogsRangeParamsWithHTTPClient(client *http.Client) *QueryLogsRangeParams {
	return &QueryLogsRangeParams{
		HTTPClient: client,
	}
}

/*
QueryLogsRangeParams contains all the parameters to send to the API endpoint

	for the query logs range operation.

	Typically these are written to a http.Request.
*/
type QueryLogsRangeParams struct {

	/* PageToken.

	     Opaque page token identifying which page to request. An empty token
	identifies the first page.
	*/
	PageToken *string

	/* Query.

	   Specifies the query to run to filter logs.
	*/
	Query *string

	/* TimeRangeAfter.

	   Only log messages with a timestamp after this time will be returned.

	   Format: date-time
	*/
	TimeRangeAfter *strfmt.DateTime

	/* TimeRangeBefore.

	   Only log messages with a timestamp before this time will be returned.

	   Format: date-time
	*/
	TimeRangeBefore *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query logs range params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryLogsRangeParams) WithDefaults() *QueryLogsRangeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query logs range params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryLogsRangeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query logs range params
func (o *QueryLogsRangeParams) WithTimeout(timeout time.Duration) *QueryLogsRangeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query logs range params
func (o *QueryLogsRangeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query logs range params
func (o *QueryLogsRangeParams) WithContext(ctx context.Context) *QueryLogsRangeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query logs range params
func (o *QueryLogsRangeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query logs range params
func (o *QueryLogsRangeParams) WithHTTPClient(client *http.Client) *QueryLogsRangeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query logs range params
func (o *QueryLogsRangeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageToken adds the pageToken to the query logs range params
func (o *QueryLogsRangeParams) WithPageToken(pageToken *string) *QueryLogsRangeParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the query logs range params
func (o *QueryLogsRangeParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithQuery adds the query to the query logs range params
func (o *QueryLogsRangeParams) WithQuery(query *string) *QueryLogsRangeParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the query logs range params
func (o *QueryLogsRangeParams) SetQuery(query *string) {
	o.Query = query
}

// WithTimeRangeAfter adds the timeRangeAfter to the query logs range params
func (o *QueryLogsRangeParams) WithTimeRangeAfter(timeRangeAfter *strfmt.DateTime) *QueryLogsRangeParams {
	o.SetTimeRangeAfter(timeRangeAfter)
	return o
}

// SetTimeRangeAfter adds the timeRangeAfter to the query logs range params
func (o *QueryLogsRangeParams) SetTimeRangeAfter(timeRangeAfter *strfmt.DateTime) {
	o.TimeRangeAfter = timeRangeAfter
}

// WithTimeRangeBefore adds the timeRangeBefore to the query logs range params
func (o *QueryLogsRangeParams) WithTimeRangeBefore(timeRangeBefore *strfmt.DateTime) *QueryLogsRangeParams {
	o.SetTimeRangeBefore(timeRangeBefore)
	return o
}

// SetTimeRangeBefore adds the timeRangeBefore to the query logs range params
func (o *QueryLogsRangeParams) SetTimeRangeBefore(timeRangeBefore *strfmt.DateTime) {
	o.TimeRangeBefore = timeRangeBefore
}

// WriteToRequest writes these params to a swagger request
func (o *QueryLogsRangeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PageToken != nil {

		// query param page.token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page.token", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.TimeRangeAfter != nil {

		// query param time_range.after
		var qrTimeRangeAfter strfmt.DateTime

		if o.TimeRangeAfter != nil {
			qrTimeRangeAfter = *o.TimeRangeAfter
		}
		qTimeRangeAfter := qrTimeRangeAfter.String()
		if qTimeRangeAfter != "" {

			if err := r.SetQueryParam("time_range.after", qTimeRangeAfter); err != nil {
				return err
			}
		}
	}

	if o.TimeRangeBefore != nil {

		// query param time_range.before
		var qrTimeRangeBefore strfmt.DateTime

		if o.TimeRangeBefore != nil {
			qrTimeRangeBefore = *o.TimeRangeBefore
		}
		qTimeRangeBefore := qrTimeRangeBefore.String()
		if qTimeRangeBefore != "" {

			if err := r.SetQueryParam("time_range.before", qTimeRangeBefore); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
