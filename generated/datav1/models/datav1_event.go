// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Datav1Event datav1 event
//
// swagger:model datav1Event
type Datav1Event struct {

	// The category the event belongs to. Must be one of these categories:
	//  * `alerts`
	//  * `broadcasts`
	//  * `chronosphere`
	//  * `deploys`
	//  * `feature_flags`
	//  * `infrastructure`
	//  * `third_party`
	//
	// Change Event categories are case sensitive. Each of the listed categories are
	// lowercase and must be queried in all lowercase. For example, `"category":
	// "alerts"` is valid, but `"category": "Alerts"` is invalid.
	//
	// Chronosphere Support can add and remove custom categories upon request.
	// Because categories are case sensitive, custom categories must be queried using
	// the same case they were created. For example, if you create a category called
	// `INGEST`, any queries in Changes Explorer must use `INGEST` in all uppercase
	// as the category to query.
	Category string `json:"category,omitempty"`

	// The time the event occurred. Must be between 24 hours in the past or 24 hours
	// in the future. Defaults to `now` if not specified.
	// Format: date-time
	HappenedAt strfmt.DateTime `json:"happened_at,omitempty"`

	// Unique identifier for the change event.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Map of queryable labels, which are user-supplied key/value pairs associated
	// with the event.
	//  * Max labels: 200 per event
	//  * Max key length: 200 characters
	//  * Max value length: 5,000 characters
	Labels map[string]string `json:"labels,omitempty"`

	// A string-escaped representation of the original event in JSON format. You can
	// set only `payload_json` or `payload_object`. This field is not queryable. Max
	// length: 100,000 characters.
	PayloadJSON string `json:"payload_json,omitempty"`

	// The JSON payload, if the original event was in key/value format. You can set
	// only `payload_json` or `payload_object`. Max length: 100,000 characters.
	// This field is input only.
	PayloadObject interface{} `json:"payload_object,omitempty"`

	// Identifies where the data originated, in cases where a change to the
	// instrumentation or integration is needed. Max length: 50 characters.
	Source string `json:"source,omitempty"`

	// A short description of the event that occurred, such as a commit message of
	// a code deploy. Max length: 100 characters.
	Title string `json:"title,omitempty"`

	// The event type, which is used to group and differentiate events within a
	// `category` or `source`.
	Type string `json:"type,omitempty"`
}

// Validate validates this datav1 event
func (m *Datav1Event) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHappenedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Datav1Event) validateHappenedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.HappenedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("happened_at", "body", "date-time", m.HappenedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this datav1 event based on the context it is used
func (m *Datav1Event) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Datav1Event) contextValidateID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "id", "body", string(m.ID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Datav1Event) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Datav1Event) UnmarshalBinary(b []byte) error {
	var res Datav1Event
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
