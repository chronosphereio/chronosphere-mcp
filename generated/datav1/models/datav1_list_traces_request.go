// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Datav1ListTracesRequest datav1 list traces request
//
// swagger:model datav1ListTracesRequest
type Datav1ListTracesRequest struct {

	// End time for the search.
	// Format: date-time
	EndTime strfmt.DateTime `json:"end_time,omitempty"`

	// Operation to filter on. An empty value doesn't apply any operation filter.
	Operation string `json:"operation,omitempty"`

	// Type of query to perform.
	// TRACE_IDS: Search for specific trace IDs.
	// SERVICE_OPERATION: Search for traces with a specific service and operation, over a specific time frame.
	QueryType struct {
		ListTracesRequestQueryType
	} `json:"query_type,omitempty"`

	// Service to filter on. An empty value doesn't apply any service filter.
	Service string `json:"service,omitempty"`

	// Start time for the search.
	// Format: date-time
	StartTime strfmt.DateTime `json:"start_time,omitempty"`

	// Tag filter to apply. An empty value doesn't apply any tag filter.
	TagFilters []*ListTracesRequestTagFilter `json:"tag_filters"`

	// Trace IDs to search for.
	TraceIds []string `json:"trace_ids"`
}

// Validate validates this datav1 list traces request
func (m *Datav1ListTracesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTagFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Datav1ListTracesRequest) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("end_time", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Datav1ListTracesRequest) validateQueryType(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryType) { // not required
		return nil
	}

	return nil
}

func (m *Datav1ListTracesRequest) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("start_time", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Datav1ListTracesRequest) validateTagFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.TagFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.TagFilters); i++ {
		if swag.IsZero(m.TagFilters[i]) { // not required
			continue
		}

		if m.TagFilters[i] != nil {
			if err := m.TagFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tag_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tag_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this datav1 list traces request based on the context it is used
func (m *Datav1ListTracesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQueryType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Datav1ListTracesRequest) contextValidateQueryType(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *Datav1ListTracesRequest) contextValidateTagFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TagFilters); i++ {

		if m.TagFilters[i] != nil {

			if swag.IsZero(m.TagFilters[i]) { // not required
				return nil
			}

			if err := m.TagFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tag_filters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tag_filters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Datav1ListTracesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Datav1ListTracesRequest) UnmarshalBinary(b []byte) error {
	var res Datav1ListTracesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
