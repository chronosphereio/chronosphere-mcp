// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ListTracesRequestQueryType list traces request query type
//
// swagger:model ListTracesRequestQueryType
type ListTracesRequestQueryType string

func NewListTracesRequestQueryType(value ListTracesRequestQueryType) *ListTracesRequestQueryType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ListTracesRequestQueryType.
func (m ListTracesRequestQueryType) Pointer() *ListTracesRequestQueryType {
	return &m
}

const (

	// ListTracesRequestQueryTypeTRACEIDS captures enum value "TRACE_IDS"
	ListTracesRequestQueryTypeTRACEIDS ListTracesRequestQueryType = "TRACE_IDS"

	// ListTracesRequestQueryTypeSERVICEOPERATION captures enum value "SERVICE_OPERATION"
	ListTracesRequestQueryTypeSERVICEOPERATION ListTracesRequestQueryType = "SERVICE_OPERATION"
)

// for schema
var listTracesRequestQueryTypeEnum []interface{}

func init() {
	var res []ListTracesRequestQueryType
	if err := json.Unmarshal([]byte(`["TRACE_IDS","SERVICE_OPERATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listTracesRequestQueryTypeEnum = append(listTracesRequestQueryTypeEnum, v)
	}
}

func (m ListTracesRequestQueryType) validateListTracesRequestQueryTypeEnum(path, location string, value ListTracesRequestQueryType) error {
	if err := validate.EnumCase(path, location, value, listTracesRequestQueryTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this list traces request query type
func (m ListTracesRequestQueryType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateListTracesRequestQueryTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this list traces request query type based on context it is used
func (m ListTracesRequestQueryType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
