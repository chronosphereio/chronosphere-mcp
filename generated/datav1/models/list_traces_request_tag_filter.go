// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListTracesRequestTagFilter list traces request tag filter
//
// swagger:model ListTracesRequestTagFilter
type ListTracesRequestTagFilter struct {

	// The key (or name) of the span tag that is inspected by this filter.
	Key string `json:"key,omitempty"`

	// Matcher used to evaluate the span tag value as a numeric value (if the
	// tag with the given key is found and the value type is numerical).
	NumericValue struct {
		TagFilterNumericFilter
	} `json:"numeric_value,omitempty"`

	// Matcher used to evaluate the span tag value (if the tag with the given
	// key is found and the value type is a string).
	Value struct {
		TagFilterStringFilter
	} `json:"value,omitempty"`
}

// Validate validates this list traces request tag filter
func (m *ListTracesRequestTagFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumericValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListTracesRequestTagFilter) validateNumericValue(formats strfmt.Registry) error {
	if swag.IsZero(m.NumericValue) { // not required
		return nil
	}

	return nil
}

func (m *ListTracesRequestTagFilter) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this list traces request tag filter based on the context it is used
func (m *ListTracesRequestTagFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNumericValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListTracesRequestTagFilter) contextValidateNumericValue(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *ListTracesRequestTagFilter) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *ListTracesRequestTagFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListTracesRequestTagFilter) UnmarshalBinary(b []byte) error {
	var res ListTracesRequestTagFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
