// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QueryLogsRangeResponseMetadata query logs range response metadata
//
// swagger:model QueryLogsRangeResponseMetadata
type QueryLogsRangeResponseMetadata struct {

	// This field indicates whether the result is truncated by the limit requested.
	LimitEnforced bool `json:"limit_enforced,omitempty"`

	// If set, there are more results to return.
	Page struct {
		QueryLogsRangeResponseMetadataPageResult
	} `json:"page,omitempty"`
}

// Validate validates this query logs range response metadata
func (m *QueryLogsRangeResponseMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryLogsRangeResponseMetadata) validatePage(formats strfmt.Registry) error {
	if swag.IsZero(m.Page) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this query logs range response metadata based on the context it is used
func (m *QueryLogsRangeResponseMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryLogsRangeResponseMetadata) contextValidatePage(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *QueryLogsRangeResponseMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryLogsRangeResponseMetadata) UnmarshalBinary(b []byte) error {
	var res QueryLogsRangeResponseMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
