// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StatusStatusCode For the semantics of status codes see
// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status
//
// - STATUS_CODE_OK: The Span has been validated by an Application developer or Operator to
// have completed successfully.
//   - STATUS_CODE_ERROR: The Span contains an error.
//
// swagger:model StatusStatusCode
type StatusStatusCode string

func NewStatusStatusCode(value StatusStatusCode) *StatusStatusCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StatusStatusCode.
func (m StatusStatusCode) Pointer() *StatusStatusCode {
	return &m
}

const (

	// StatusStatusCodeSTATUSCODEOK captures enum value "STATUS_CODE_OK"
	StatusStatusCodeSTATUSCODEOK StatusStatusCode = "STATUS_CODE_OK"

	// StatusStatusCodeSTATUSCODEERROR captures enum value "STATUS_CODE_ERROR"
	StatusStatusCodeSTATUSCODEERROR StatusStatusCode = "STATUS_CODE_ERROR"
)

// for schema
var statusStatusCodeEnum []interface{}

func init() {
	var res []StatusStatusCode
	if err := json.Unmarshal([]byte(`["STATUS_CODE_OK","STATUS_CODE_ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statusStatusCodeEnum = append(statusStatusCodeEnum, v)
	}
}

func (m StatusStatusCode) validateStatusStatusCodeEnum(path, location string, value StatusStatusCode) error {
	if err := validate.EnumCase(path, location, value, statusStatusCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this status status code
func (m StatusStatusCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStatusStatusCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this status status code based on context it is used
func (m StatusStatusCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
