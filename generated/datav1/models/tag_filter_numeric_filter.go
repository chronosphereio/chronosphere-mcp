// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TagFilterNumericFilter tag filter numeric filter
//
// swagger:model TagFilterNumericFilter
type TagFilterNumericFilter struct {

	// The comparison operation to be applied to an input against the given filter value.
	Comparison struct {
		NumericFilterComparisonType
	} `json:"comparison,omitempty"`

	// The filter value used in comparison against match candidates.
	Value float64 `json:"value,omitempty"`
}

// Validate validates this tag filter numeric filter
func (m *TagFilterNumericFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComparison(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagFilterNumericFilter) validateComparison(formats strfmt.Registry) error {
	if swag.IsZero(m.Comparison) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this tag filter numeric filter based on the context it is used
func (m *TagFilterNumericFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateComparison(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagFilterNumericFilter) contextValidateComparison(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *TagFilterNumericFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagFilterNumericFilter) UnmarshalBinary(b []byte) error {
	var res TagFilterNumericFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
