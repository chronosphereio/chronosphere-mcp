// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TagFilterStringFilter tag filter string filter
//
// swagger:model TagFilterStringFilter
type TagFilterStringFilter struct {

	// Values the filter tests against when using IN or NOT_IN match type.
	InValues []string `json:"in_values"`

	// If EXACT, compared strings have the exact value of the filter value.
	Match struct {
		StringFilterStringFilterMatchType
	} `json:"match,omitempty"`

	// The value the filter compares to the target trace or span field.
	Value string `json:"value,omitempty"`
}

// Validate validates this tag filter string filter
func (m *TagFilterStringFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatch(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagFilterStringFilter) validateMatch(formats strfmt.Registry) error {
	if swag.IsZero(m.Match) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this tag filter string filter based on the context it is used
func (m *TagFilterStringFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TagFilterStringFilter) contextValidateMatch(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *TagFilterStringFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TagFilterStringFilter) UnmarshalBinary(b []byte) error {
	var res TagFilterStringFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
