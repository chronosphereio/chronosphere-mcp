// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Tracev1Status The Status type defines a logical error model that is suitable for different
// programming environments, including REST APIs and RPC APIs.
//
// swagger:model tracev1Status
type Tracev1Status struct {

	// The status code.
	Code struct {
		StatusStatusCode
	} `json:"code,omitempty"`

	// A developer-facing human readable error message.
	Message string `json:"message,omitempty"`
}

// Validate validates this tracev1 status
func (m *Tracev1Status) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tracev1Status) validateCode(formats strfmt.Registry) error {
	if swag.IsZero(m.Code) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this tracev1 status based on the context it is used
func (m *Tracev1Status) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Tracev1Status) contextValidateCode(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *Tracev1Status) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Tracev1Status) UnmarshalBinary(b []byte) error {
	var res Tracev1Status
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
