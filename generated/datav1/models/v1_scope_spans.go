// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1ScopeSpans A collection of Spans produced by an InstrumentationScope.
//
// swagger:model v1ScopeSpans
type V1ScopeSpans struct {

	// The Schema URL, if known. This is the identifier of the Schema that the span data
	// is recorded in. Notably, the last part of the URL path is the version number of the
	// schema: http[s]://server[:port]/path/<version>. To learn more about Schema URL see
	// https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
	// This schema_url applies to all spans and span events in the "spans" field.
	SchemaURL string `json:"schema_url,omitempty"`

	// The instrumentation scope information for the spans in this message.
	// Semantically when InstrumentationScope isn't set, it is equivalent with
	// an empty instrumentation scope name (unknown).
	Scope struct {
		V1InstrumentationScope
	} `json:"scope,omitempty"`

	// A list of Spans that originate from an instrumentation scope.
	Spans []*V1Span `json:"spans"`
}

// Validate validates this v1 scope spans
func (m *V1ScopeSpans) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ScopeSpans) validateScope(formats strfmt.Registry) error {
	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	return nil
}

func (m *V1ScopeSpans) validateSpans(formats strfmt.Registry) error {
	if swag.IsZero(m.Spans) { // not required
		return nil
	}

	for i := 0; i < len(m.Spans); i++ {
		if swag.IsZero(m.Spans[i]) { // not required
			continue
		}

		if m.Spans[i] != nil {
			if err := m.Spans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("spans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 scope spans based on the context it is used
func (m *V1ScopeSpans) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ScopeSpans) contextValidateScope(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *V1ScopeSpans) contextValidateSpans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Spans); i++ {

		if m.Spans[i] != nil {

			if swag.IsZero(m.Spans[i]) { // not required
				return nil
			}

			if err := m.Spans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("spans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ScopeSpans) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ScopeSpans) UnmarshalBinary(b []byte) error {
	var res V1ScopeSpans
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
