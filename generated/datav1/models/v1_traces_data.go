// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1TracesData TracesData represents the traces data that can be stored in a persistent storage,
// OR can be embedded by other protocols that transfer OTLP traces data but do
// not implement the OTLP protocol.
//
// The main difference between this message and collector protocol is that
// in this message there will not be any "control" or "metadata" specific to
// OTLP protocol.
//
// When new fields are added into this message, the OTLP request MUST be updated
// as well.
//
// swagger:model v1TracesData
type V1TracesData struct {

	// An array of ResourceSpans.
	// For data coming from a single resource this array will typically contain
	// one element. Intermediary nodes that receive data from multiple origins
	// typically batch the data before forwarding further and in that case this
	// array will contain multiple elements.
	ResourceSpans []*V1ResourceSpans `json:"resource_spans"`
}

// Validate validates this v1 traces data
func (m *V1TracesData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceSpans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TracesData) validateResourceSpans(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceSpans) { // not required
		return nil
	}

	for i := 0; i < len(m.ResourceSpans); i++ {
		if swag.IsZero(m.ResourceSpans[i]) { // not required
			continue
		}

		if m.ResourceSpans[i] != nil {
			if err := m.ResourceSpans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resource_spans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resource_spans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v1 traces data based on the context it is used
func (m *V1TracesData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourceSpans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1TracesData) contextValidateResourceSpans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ResourceSpans); i++ {

		if m.ResourceSpans[i] != nil {

			if swag.IsZero(m.ResourceSpans[i]) { // not required
				return nil
			}

			if err := m.ResourceSpans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resource_spans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("resource_spans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1TracesData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1TracesData) UnmarshalBinary(b []byte) error {
	var res V1TracesData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
