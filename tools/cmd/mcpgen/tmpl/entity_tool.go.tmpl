package {{ .PkgName }}

import (
	"context"
	"fmt"

	"github.com/mark3labs/mcp-go/mcp"
	"go.uber.org/zap"

	"github.com/chronosphereio/chronosphere-mcp/generated/configv1/configv1"
	"github.com/chronosphereio/chronosphere-mcp/generated/configv1/configv1/{{ .Entity.PkgName }}"
	"github.com/chronosphereio/chronosphere-mcp/mcp-server/pkg/tools"
	"github.com/chronosphereio/chronosphere-mcp/mcp-server/pkg/tools/pkg/params"
	"github.com/chronosphereio/chronosphere-mcp/pkg/ptr"
)

{{ $entity := .Entity }}

{{ range $idx, $toolSpec := .Entity.ToolSpecs }}
func {{ $toolSpec.CamelName }}(api *configv1.ConfigV1API, logger *zap.Logger) tools.MCPTool {
    return tools.MCPTool{
        Metadata: tools.NewMetadata({{ printf "%q" $toolSpec.SnakeName }},
            mcp.WithDescription({{ printf "%q" $toolSpec.Description }}),
            {{ range $idx, $param := $toolSpec.Parameters }}
                {{$param.MCPParamFunc}}({{ printf "%q" $param.Name }},
                    mcp.Description({{ printf "%q" $param.Description }}),
                    {{ if $param.Required -}}
                        mcp.Required(),
                    {{ end }}
                ),
            {{ end }}
        ),
        Handler: func(ctx context.Context, request mcp.CallToolRequest) (*tools.Result, error) {
        {{ range $idx, $param := $toolSpec.Parameters }}
            {{ $param.GoName }}, err := params.{{$param.ParseType}}(request, {{ printf "%q" $param.Name }}, {{ if $param.Required }}true{{ else }}false{{ end }}, {{ $param.DefaultValue }})
            if err != nil {
                return nil, err
            }
        {{ end }}

            queryParams := &{{$entity.PkgName}}.{{$toolSpec.APIParam}}Params{
                Context: ctx,
            {{ range $idx, $param := $toolSpec.Parameters }}
                {{ if eq $param.GoName "pageToken" -}}
                    {{$param.SwaggerGoFieldName}}: &{{$param.GoName}},
                {{ else if eq $param.GoName "pageMaxSize" -}}
                    {{$param.SwaggerGoFieldName}}: ptr.To(int64({{$param.GoName}})),
                {{ else if and (not $param.Required) $param.IsScalar -}}
                    {{$param.SwaggerGoFieldName}}: ptr.To({{$param.GoName -}}),
                {{ else -}}
                    {{$param.SwaggerGoFieldName}}: {{$param.GoName -}},
                {{end -}}
            {{ end }}
            }

		    resp, err := api.{{$entity.Name}}.{{$toolSpec.APIParam}}(queryParams)
            if err != nil {
                return nil, fmt.Errorf("failed to call {{$toolSpec.APIParam}}: %s", err)
            }
            return &tools.Result{
                JSONContent: resp,
            }, nil
        },
	}
}
{{ end }}
